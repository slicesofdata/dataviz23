---
title: "R, RStudio, R Markdown"
#author: "Gabriel I. Cook"
#date: "`r Sys.Date()`"
#date: "`r format(Sys.time(), '%d %B, %Y')`"
output: 
  html_document:               
    toc: yes                   # include a table of contents
    number_sections: yes       # enumerate sections flagged with #
    code_folding: hide         # allow option to show/hide code

#editor_options: 
#  chunk_output_type: console
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


# R, RStudio, R Markdown

# Reading Files

## Load our libraries

-   `here` will help keep folders organized

-   [`tidyverse`](https://www.tidyverse.org/packages/) is an ecosystem that will load other relevant libraries

    -   `readr` for reading data files

    -   `dplyr` for manipulating data files

    -   `ggplot` for and creating plots

    -   `magrittr` for piping or chaining code commands




```{r message=FALSE, warning=FALSE, include=FALSE}
rm(list = ls(all.names = TRUE))   # remove objects in R

```

# **Class Directory Set Up**

Before doing anything involving code, we will set up our systems so that they are structured the same. 

1. Create a folder/directory on your computer someplace and name it **"GCDS"** (uppercase).   
2. Inside that folder/directory, create two other directories, one named **"r"** and one named **"data"** (lowercase)
3. Go to **RStudio -> Tools -> Global Options** and set the *default working directory* to where you created "GCDS". Browse, select and set. You might need to close `RStudio` and restart it to fully adopt the settings.


The location of where you create the "GCDS" directory matters less than remembering where you create it because all your key files for this class will be saved in these two directories. Every time you access a code file (e.g., `.R` or `.Rmd`), you will save it in `"GCDS/r"` and data will be saved in `"GCDS/data".`

Now you can open any `.Rmd` files provided for the first day. If you used `RStudio` to open any files I provided you for class, close them out completely, make sure they are saved in the above referenced directories, and then reopen from within their respective directories.


# **R Coding Style Guide**

Hadley Wickham, the developer of many `R` libraries, including the main graphics package, `ggplot` and its current form,`ggplot2`, as well as the main data manipulation package, `dplyr`, has provided recommendations for `R` coding styles. Having a common coding style generally makes reading code easier across individuals. You can find the style guide available at [https://style.tidyverse.org/](https://style.tidyverse.org/). In particular, check the section on [syntax](https://style.tidyverse.org/syntax.html) as that will be your focus.


# **Setting Up RStudio**

You will use `RStudio` for most coding for this course. In order to simplify troubleshooting and errors, we will customize some settings together. 

- Getting on the same `RStudio` page
- Global Options
- Other Settings


# **Understanding R Markdown**

For this class, we will create `R` scripts, which end with file extension `.R` and `R Markdown` files which end with file extension `.Rmd`. We will use `R Markdown` for creating HTML outputs to show work. `R Markdown` is also useful in order to create reports that involve italics, bolding font, inserting tables, etc. 

## **R Markdown: Code Execution**

This exercise is created with `R Markdown` code. `R Markdown` is a version of Markdown, which is a markup language for creating formatted text output using a plain-text. You are likely familiar with the most famous markup language, HTML (Hypertext Markup Language), which makes websites readable for us all.

Within this `RMarkdown` file, the code is written between particular tick marks ``` and curly braces and {r}. These special character combinations simply allow RStudio to know what is R code (e.g., the lowercase r) and what is written text. 

In `RStudio`, you can modify the code block/chunk by clicking the gear to make changes. You can specify whether the code shows the output only, shows the code and the output, whether the code is executed but not shown, or whether the code is not run at all. You can also toggle one and off options to display warnings, message, and other details. You can also review other options if you wish. You'll notice that `warnings` and `messages` will make your output ugly so hiding them is often ideal.  

This exercise serves as a tutorial with the goal of familiarizing you with using `R` and `RMarkdown`. The output will be a nice HTML file containing your results. Within the code blocks, to execute code you would put your cursor on the line and press the RUN button (see top right) or press `CONTROL+ENTER` for PC or `COMMAND+ENTER` for Mac.


## **R Markdown: Cheat Sheet**

There are many ways to customize an `R Markdown` file. You will need to insert `R` code, write text descriptions, create plots and tables, etc. In some instances you would want to include your `R` code or hide it from the output in their certain ways for doing that in the `R Markdown` language. Some of these ways are created automatically for you in `RStudio` when you initiate new `R Markdown` file.  others can be be found in this 
[R Markdown cheat sheet](https://www.dataquest.io/blog/r-markdown-guide-cheatsheet/). 
`RStudio` also has various cheat sheets which you can find [here](https://www.rstudio.com/resources/cheatsheets/).
You can also read more in [FODS CH2](https://www.markhuberdatascience.org/_files/ugd/c2b9b6_543ea42a1ea64e32b4440b34ffd71635.pdf)

## **R Markdown: The Definitive Guide**

Xie, Allaire, and Grolemund have an advanced guide for all the things you can do with `R Markdown`. It's called [R Markdown: The Definitive Guide] ([https://bookdown.org/yihui/rmarkdown/output-formats.html)

## **Some things you can do with RMarkdown**

Wrap text in * to make text italics 

Italicize *this*

Wrap text in ** to make text bold 

Bold **this**

Embed `R` code inside test using ``r `` 

For example, the average mpg for cars in the mtcars data set is `r mean(mtcars$mpg)` thought that should be rounded  `r round(mean(mtcars$mpg), 1)` to be more clear.

Embed `R` code blocks using ````{r}`

Automatically enumerate text sections flagged using # 

Example:

*# Main Section*

*## 2nd Level*

*### 3rd Level*


# **R Function Libraries/Packages**

Libraries, or packages, represent a collection of functions used to perform different operations in `R`. Some of the libraries are built into the base version of `R` whereas others are external and must be accessed or downloaded. These libraries are created and built by users of `R` in order to make their lives easier. The benefit for the rest of us is to utilize those resources that are shared by their creators. For example, in order to use `R Markdown` in our `RStudio`, we will need to install the `rmarkdown` library.

There are different ways of installing these libraries. One of those ways is to install them directly from `RStudio` by accessing the *Tools* menu option, clicking on *Install Packages*, and by typing the name of the desired library. The library will then be installed for you to access within `R`. Another way to install packages is by using a procedure that someone code that executes the procedure. Of course, this means you have to type the code but coding is not a bad thing. In fact, type code is what makes what you do reproducible in many ways. When your memory fails for doing x, y, and z in order y, z, x, code won't be confused. 

In `R` and many languages, these coded procedures are called functions. The function for installing packages is aptly named `install.packages()`. For this function will specify the name of the library/package within the parentheses. 

`install.packages("rmarkdown")`

You can also install multiple libraries using `install.packages()` by combining them into a vector or a list using `c()`; the c stands for *combine*. For example, 

`install.packages(c("rmarkdown", "rstudioapi"))`

Try it out:

```{r}
#This code is commented out so it doesn't run. You may have difficulty with knitting the file if you include it.

#install.packages("rmarkdown")

#install.packages(c("rmarkdown", "rstudioapi"),
#                 repos = "https://cloud.r-project.org")
```

Once libraries have been installed, you can access their various functions but that step will come later. Although the order of installation for libraries does not matter, the order in which you access libraries can matter. Keep an eye to for warnings in the `R console`.



# **Some Custom Code for Class + Sourcing R Code From a Website**

Let's side-step a bit. There or a set of libraries that we will be using to carry out various data-exploration tasks. Rather than having you install them all, you can access `R` code saved on [pastebin.com](https://pastebin.com). The code will read in a set of packages, check whether your version of or has them installed, and install them if they are missing. However, in order to read `R` code from an Internet connection, we will use a function called `source()` and specify the URL from which to access that code. Because `source()` will read `R` code and content from a file or a connection, this function will also come in handy when you have `R` code files saved on your computer. We will use this approach when demonstrating how to keep main files clean and tidy. 

You can see the code on pastebin.com by clicking [here](https://pastebin.com/raw/8mXH02yg). You will see a variety of function libraries that we will use for the course that are not part of base `R`. We can be thankful for the creators of them but installing them may take quite a while.

For this course, we will reference [this file](https://pastebin.com/b63hB7Hj) which you can see uses `source()` to call the content show above. There are alternative approaches (e.g., github) but learning them is not essential for this course which is the reason to take this simpler approach. One reason for referencing this remote `R` code from pastebin.com is to ensure everyone is installing the same libraries and loading the same functions without error. Also, if I wish to add libraries or functions throughout the course, I can edit this code without requiring you to change your code. As such, the following line of code will be included in all of your `R` work; you will see code at the top of this raw `.Rmd` file. There may also be other `R` files that we will source in the same way.

```{r message=FALSE, warning=FALSE, include=FALSE, paged.print=FALSE}
# getting raw R code
source("https://pastebin.com/raw/b63hB7Hj")
```



# **Some things about the R Language**

## **`R` is an Interpreted Language**

`R` is an interpreted language. This means that code or programs you write may be executed by the `R` interpreter in real time. The code you write does not need to be compiled prior to being executed. Rather, the `R` interpreter translates your code in real time if it understands what your code. If the `R` interpreter doesn't understand the code, it will be unable to translate and you will receive some error.

## **Functions**
The code you write for the interpreter will involve referencing functions. You have used a function already when installing libraries (e.g., `install.packages()`. A `function` is nothing more than a set of statements organized together to perform some desired operation. In `R`, a function is an object. This means the `R` interpreter passes control to the function, along with any arguments that are necessary for the function to perform that operation and return the result of that operation. 

## **A Function Example**

For example, reading a file into `R` involves using a function that performs that operation. For these functions to read a file containing data, you will need to specify the required and/or optional `arguments` for given `parameters` of the function. One such function is `read.table()` and another is `read.csv()`, the latter of which is only a special case of the former. For this function to read a file, you would need to specify the `file` argument (and file path if the file is not in your working directory) argument at very least so that `R` knows what file to read. Specifically, `read.csv()` reads a file with columns delimited by a comma; `read.csv(file = "my_file_to_read.txt")` or `read.csv(file = "projects\data\my_file_to_read.txt")`. Note **csv** is an acronym for **c**omma-**s**eparated **v**alues. The default separation parameter for `sep` in `read.csv()` is the comma so you do not need to specify it. 

An alternative to `read.csv()` is `read.table()`, which is a more flexible function because it allows you to specify the separation character contained in the file. By default `sep` is set to `""`, which you will see is an *empty string* (e.g., there is no character between the quotes).  To read a csv file with `read.table()`, you would specify the separation argument `sep` with the character specifying the separation between columns. In this case, that character is a comma (e.g., `sep = ","`); `read.table(file = my_file_to_read, sep = ",")`. If the file was separated by tabs rather than commas, you would specify the `sep` argument with the code for a tab (e.g., "\t"); `read.table(file = my_file_to_read, sep = "\t")`
will files that are delimited by a character . Although you will certainly see other code importing files with `read.csv()` and `read.table()`, we will use the `readr` library functions for importing and exporting files.

## **File Paths for Collaboration**

If you are collaborating with folks some of whom are using pcs and others who are using macs, you may wish to review the function named `file.path()` which takes two arguments, one argument for the file path and another argument for the file name.  To file our more about that function, query it in your command console by typing `?file.path`.

```{r eval=FALSE, include=FALSE}
?file.path
```


# **Getting Help**


## **Internal Help**

You will certainly run into problems coding. When you don't speak the language perfectly, `R` will let you know there are errors. So, how do you find help in `R`? 

To ask `R` about what a function does, you can use `?` paired with the function. In the **Help** window, you will see information about the package the function is from, how it is used, how to use it by specifying *arguments* (more on this later), and usually some examples of how it is used.  

`?install.packages`

```{r eval=FALSE, include=FALSE}
?install.packages
```

Alternatively, you can use the `help()` function:

- `help("install.packages")`
- `help("install.packages", package = "utils")`


Similar methods:

```{r eval=FALSE, include=FALSE}
# these methods are all equivalent ways of getting help
help("install.packages")
#?install.packages
#?utils::install.packages

#?aes
#?ggplot2::aes
help("aes")
help("aes", package = "ggplot2") 
```

You can also simply type a query into the search bar in the `RStudio` Help menu. 

## **External Help**

Sometimes you need to find help outside of the `R` environment. In this case, just use Google. Type in your query by including the letter R to narrow the search results and you will see a lot that pops up. [https://stackoverflow.com](https://stackoverflow.com) will likely be returned in your search results with questions that people have posted to the website for help from others. This is a community of coders helping coders. You can create an account if you wish, but reading questions and answers to those questions is free. Perhaps in years from now, you can answer questions for others.


For example, if you know you are using the `dplyr` library and you are using a function called `starts_with()`, you can search Google for "dplyr starts_with r"
[and this is what you will see](https://www.google.com/search?q=dplyr+starts_with+r)

