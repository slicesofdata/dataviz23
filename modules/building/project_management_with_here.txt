---
title: "Project Management with `here`n"
#author: "Gabriel I. Cook"
#date: "`r Sys.Date()`"
#date: "`r format(Sys.time(), '%d %B, %Y')`"
output: 
  html_document:               
    toc: yes                   # include a table of contents
    number_sections: yes       # enumerate sections flagged with #
    code_folding: hide         # allow option to show/hide code

#editor_options: 
#  chunk_output_type: console
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Project Management

## Create a Project. 


## Examining in the project structure

We will now discuss tidy project management using the `here` library, not to be confused with the `hereR` library. Install it if its not installed. Calling the `here::here()` function, you will see the active path is the project directory.


``` R
install.packages("here")

here::here()
```

You may find [Krista DeStasio's](https://kdestasio.github.io/post/r_best_practices/) post on best practices paying special attention to the first section on *Project organization*. 

She comments:

`data` contains the raw data files used in the project. These files should not be altered and are ideally read-only.
doc

`doc` contains any manuscripts or interim summaries produced with the project.
figs

`figs` contains any plots, images, tables, or figures created and saved by your code. It should be possible to delete and regenerate this folder with the scripts in the project folder.
output

`output` contains non-figure objects created by the scripts. For example, processed data or logs.
src

`src` is an optional folder for any files you may want to source() in your scripts. This is not code that is run. For example, simple .R files containing functions.



The main point is that you want to avoid having code in a single top directory. Instead, consider themes or related content that will be necessary for the project. All projects are different but may also contain the main staples. 
In addition, if you are maintaining the project remotely, you want to consider directories that contain sensitive information to ingored before pushing to a repository. **NOTE: Make sure to add these ignore directories before accidentally pushing.**  

data

`data` contains the raw data files used in the project. These files should not be altered and are ideally read-only.
doc

`doc` contains any manuscripts or interim summaries produced with the project.
figs

`figs` contains any plots, images, tables, or figures created and saved by your code. It should be possible to delete and regenerate this folder with the scripts in the project folder.
output

`output` contains non-figure objects created by the scripts. For example, processed data or logs.
src

`src` is an optional folder for any files you may want to source() in your scripts. This is not code that is run. For example, simple .R files containing functions.



* Staples
 + R code
   - Pre-processing or clean-up scripts
   - Analysis or Model scripts
 + Data files
 + Images/figures
 + api (perhaps add to git ingore)



# Create your Directories

You can also just create a function and add it to a personal function file or add an [RStudio snippet](https://support.posit.co/hc/en-us/articles/204463668-Code-Snippets-in-the-RStudio-IDE) containing the code to improve your workflow.

Because there are several directories and at least one sub-directory, let's just pass a vector or directories to `lapply()` to loop through the elements and creates each directory with `dir.create()`.

``` R
lapply(c("data", "R", "R/src", "R", "figs", "docs", "api"), dir.create)
```

`snippet proj_dir`
	`lapply(c("data", "R", "R/src", "R", "figs", "docs", "api"), dir.create)`









```{r setup, include=FALSE}
sf::dir_tree()

knitr::opts_chunk$set(echo = TRUE)
```

