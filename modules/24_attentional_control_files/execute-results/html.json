{
  "hash": "23b7132d1acb9b2405ed56ffe46b7ac9",
  "result": {
    "markdown": "---\ntitle: \"**Attentional control**\"\nauthor: \"Gabriel I. Cook\"\n#date: \"2023-11-21\"\ndate: \"21 November, 2023\"\n\n# this is a test to fingure out why there is the following error when rendering many quarto files:\n# ERROR: The filename, directory name, or volume label syntax is incorrect. (os error 123)\n---\n\n\n\n\n::: callout-important\n## Under construction. \n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you.\n\n:::\n\n# **Overview**\n\nWhen creating data visualizations, your data should be communicated in a way that does not require your audience to think too much about the main points. This does not mean that viewers should not engage in deep and thoughtful interpretation of the data and look for patterns that are not perfectly clear. The visualization should be designed to communicate a particular goal, however, which is essential to the creation process. On some occasions, you may want to focus attention to particular plot elements. We have done this before by changing colors, shapes, size, and other decorative properties of visualizations. We have also narrowed the space by creating visualizations for a specific subset of the data (e.g., team, event, etc.) and we have guided attention by creating small multiples of a particular plot. Panel or facet plots present the same data that is presented in a plot for which an aesthetic is mapped to variables (creating a legend) but panel plots isolate the subgroups by creating separate plots. We have seen advantages and disadvantages of this approach. There are always trade offs if only one plot type is used.\n\nFor this module, the goal is to further explore ways for you to control the attention of your audience. You may need to highlight some relevant or interesting aspect of the data that may be overlooked. You may also need to guide attention to a subset of data or a plot region so that your audience has no ambiguity about where to look and how to inspect. Controlling attention in these ways will of course have associated trade offs. You should evaluate the trade offs and ask yourself whether directing attention to a plot region or to a subset of data achieves your intended goal. If doing so may complicate plot interpretation or confuse user, then consider other ways. If you want to facilitate your audience making comparisons between the data or region of interest and other data or regions, then directing their attention may be preferred to creating multiple visualizations as comparisons can be compromised when make across space, pages, and time. \n\n# **To Do**\n\n## **Readings**\n\nReading should take place in two parts:\n\n - *Prior to class*, the goal should be to familiarize yourself and bring questions to class. The readings from [TFDV](https://clauswilke.com/dataviz) are conceptual and should facilitate readings from [EGDA](https://ggplot2-book.org/) for code implementation.\n - *After class*, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems. \n\n*Before Class*: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of **{ggplot2}**. I will assume that you attend class with some level of basic understanding of concepts.\n\n*Class*: In class, some functions and concepts will be introduced and we will practice implementing **{ggplot2}** code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week's readings. \n\n*After Class*: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from **Wickham, Navarro, & Pedersen (under revision)**. *ggplot2: Elegant Graphics for Data Analysis (3e)*.\n\n- [Wilke (2019). *Fundamentals of Data Visualization*. Balance the data and the context](https://clauswilke.com/dataviz/balance-data-context.html)\n- [Wilke (2019). *Fundamentals of Data Visualization*. Use larger axis labels](https://clauswilke.com/dataviz/small-axis-labels.html)\n- [Ajani et al. (2022). Declutter and Focus: Empirically Evaluating Design Guidelines for Effective Data Communication](https://ieeexplore.ieee.org/document/9385921)\n\n## **External Functions**\n\nProvided in class:\n\n`view_html()`: for viewing data frames in html format, from `/r/my_functions.R` \n\nYou can use this in your own work space but I am having a challenge rendering this of the website, so I'll default to `print()` on occasion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"r\", \"my_functions.R\"))\n```\n:::\n\n\n## **Libraries**\n\n- **{dplyr}** 1.1.2: for selecting, filtering, and mutating\n- **{magrittr}** 2.0.3: for code clarity and piping data frame objects\n- **{ggplot2}** 3.4.3: for plotting\n- **{ggrepel}** 0.9.3: for repelling labels from points and lines \n- **{geomtextpath}** 0.1.1: for annotation of curved paths (also straight)\n- **{gghighlight}** 0.4.0: for highlighting lines and points \n- **{ggtext}** 0.1.2: for text on plots; markdown elements (viz, element_markdown)\n\n\n# **Loading Libraries**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(geomtextpath)\nlibrary(gghighlight)\nlibrary(ggtext)\n```\n:::\n\n\n\n\n# **Sizing up plot elements**\n\nThe font size of plot elements can be increased to make them more easy to process. You can do this by adjusting text elements within `theme()`. \n\n\n## **Increase the size of axis labels**\n\nFor each `axis.text.<axis>`, you can adjust the `element_text()`. \n\n- `axis.text.x = element_text(size = 12)`\n- `axis.text.y = element_text(size = 12)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(base_plot <- DATA |>\n  filter(Year == 2019) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       col = Team\n                       )\n         ) +\n  geom_point(size = 2.2,\n             alpha = .8,\n             position = position_jitter(height = 0, seed = 167)\n             ) +\n  ylim(0, 60) +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12)   # y-axis size\n        )\n)\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNotice that this adjustment does not increase the legend text size too. This is a different element.\n\n\n## **Increase the size of the legend labels** \n\n- `legend.text = element_text(size = 12)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12),  # y-axis size\n        legend.text = element_text(size = 12)   # legend text size\n        )  \n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## **Increase the size of the legend 'shapes'** \n\nWe have already addressed how to make legend shape elements larger too. This adjustment is in the `guides()` and requires overriding aesthetics. We need to add a `guides()` layer. Importantly, you need to be careful to specify the aesthetic mapped, in this case `col`. If you mapped a variable to a discrete color, then you will need to change the size of the `col` aesthetics. If you mapped a variable to a shape, and you want to increase the size of the shapes, then you will need to change the size of the `shape` aesthetics.\n\n- `guides(<aesthetic mapped> = guide_legend(override.aes = list(size = 3)))`\n\n\nIn this example, `col` was mapped and the goal is to change the size of the color 'shape' so the solution is:\n\n- `guides(col = guide_legend(override.aes = list(size = 3)))`\n\n\nThere is no `shape` mapping, so changing the size of the shape will not work:\n\n- `guides(shape = guide_legend(override.aes = list(size = 3)))`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12),  # y-axis size\n        legend.text = element_text(size = 12)   # legend text size\n        ) +\n  guides(col = guide_legend(override.aes = list(size = 3)))\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## **Passing objects for adjustments** \n\nOf course, the points on the plot are small too, so you would want to adjust them if necessary. We can use some objects to make the process easier. If you want to apply the same approach to many or all plots you create, you might just prefer to create a custom `theme()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint_size <- 3\nfont_size  <- 11\n\nbase_plot +\n  theme(\n        # the axis text in general\n        axis.text = element_text(size = font_size),     # both and ticks\n        # or specifically\n        #axis.text.x = element_text(size = font_size),  # x-axis size\n        #axis.text.y = element_text(size = font_size),  # y-axis size\n        \n        # the title label\n        axis.title = element_text(size = font_size + 3),  # bump it up relatively\n        \n        # the legend text\n        legend.title = element_text(size = font_size + 1),  # legend title, bump up if desired\n        legend.text = element_text(size = font_size)    # legend text size\n        ) +\n  guides(col = guide_legend(override.aes = list(size = point_size)))\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# **Identifying points of interest**\n\n\n## **Adding reference points**\n\nLet's say you want to highlight a data point or location of interest. We can do so by specifying the point or region. \n\nThere are a few ways to address this. You can use `stat_summary()` to draw attention to a place on the plot, the mean of the variable mapped to y.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  stat_summary(\n    fun = \"mean\",        # the summary function\n    geom = \"point\",      # the geom \n    #shape = 23,         # the geom_point shape if you wish to change it \n    size = 3,            # the color \n    #fill = \"grey\",      # fill color if your point has fill \n    col = \"grey20\",        # the color\n    alpha = .8\n    )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWhereas `stat_summary()` applies the function to the groups, you may wish to highlight a single point. When this is the case, you will use different data than what you pass to the `ggplot()` object.\n\nThe best athlete.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n( best_2019 <- DATA |> filter(Year == 2019) |>  slice_max(Score) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n  Athlete        Rank Score Meet                               Date  Team   Year\n  <chr>         <dbl> <dbl> <chr>                              <chr> <chr> <dbl>\n1 Sill, Michael     2  49.8 SCIAC Track & Field Conference Ch… Apr … Stag   2019\n```\n:::\n:::\n\n\n\nWhen only x or y matters, you can specify that single point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n( mean_y_2019 <- DATA |> filter(Year == 2019) |>  pull(Score) |> mean() )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 39.37329\n```\n:::\n:::\n\n\n\nWhen x and y matter, you may wish to specify that point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n( mean_xy_2019 <- DATA |> \n  filter(Year == 2019) |>  \n  summarize(Rank = mean(Rank, na.rm = T),\n            Score = mean(Score, na.rm = T)\n  )\n)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Rank Score\n  <dbl> <dbl>\n1  2.54  39.4\n```\n:::\n\n```{.r .cell-code}\n( team_mean_xy_2019 <- DATA |> \n  filter(Year == 2019) |>  \n  group_by(Team) |>\n  summarize(Rank = mean(Rank, na.rm = T),\n            Score = mean(Score, na.rm = T)\n  )\n) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  Team    Rank Score\n  <chr>  <dbl> <dbl>\n1 Athena  2.42  32.4\n2 Stag    2.64  45.0\n```\n:::\n:::\n\n\n\n## **Adding reference line**\n\nLet's plot a horizontal line using `geom_hline()` to direct attention for reference or comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  geom_hline(yintercept = mean_y_2019)\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nLet's add a label easily using **{geomtextpath}**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  geomtextpath::geom_texthline(yintercept = mean_y_2019,\n                               label = \"2019 average\",\n                               alpha = .5\n                               )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNotice, we are only specifying a place for all athletes rather than for Stags and Athenas separately.\n\n\n\n## **Adding reference point with annotation**\n\n### `annotate(geom = \"point\")`\n\nUse `annotate()` to plot a point to highlight some element using `geom = \"point\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 3\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### `annotate(geom = \"point\")` and `annotate(geom = \"text\")`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 3\n  ) +\n  annotate(geom = \"text\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score - 1, \n           label = \"mean\",\n           size = 3\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### `geom_curve()` with `arrow()`\n\nDirect attention with annotation and an arrow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 3\n  ) +\n  annotate(geom = \"text\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score - 1, \n           label = \"mean\",\n           size = 3\n  ) +\n  geom_curve(x = mean_xy_2019$Rank,                 # where the curve begins\n             y = mean_xy_2019$Score,\n             xend = mean_xy_2019$Rank + .2,          # where the curve ends\n             yend = mean_xy_2019$Score + 2,\n             color = \"grey20\", \n             arrow = arrow(angle = 20,              # angle of the arrow\n                           length = unit(0.25,\"cm\"),\n                           ends = \"first\",          # \"last\", \"first\", or \"both\"\n                           type = \"closed\"          # \"open\" or \"closed\" triangle\n                           ),\n             curvature = 1                        # the amount of curvature (0 is a line, not a curve) \n             ) \n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nBut the arrow point is overlapping the mean point. Let's back off. Also, if you won't be getting new data, you can set the coordinates to static values. This plot reflects a series of edits. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 3\n  ) +\n  annotate(geom = \"text\", \n           col = \"grey20\",\n           x = 2,\n           y = 19, \n           label = \"mean\",\n           size = 4\n  ) +\n  geom_curve(x = mean_xy_2019$Rank - .04,           # where the curve begins\n             y = mean_xy_2019$Score - 1,\n             xend = 2,                              # where the curve ends\n             yend = 20,\n             color = \"grey20\", \n             arrow = arrow(angle = 20,              # angle of the arrow\n                           length = unit(0.25,\"cm\"),\n                           ends = \"first\",          # \"last\", \"first\", or \"both\"\n                           type = \"closed\"          # \"open\" or \"closed\" triangle\n                           ),\n             curvature = 0.1                        # the amount of curvature (0 is a line, not a curve) \n             ) \n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### `geomtextpath::geom_textcurve()`\n\nDirect attention with annotation along the line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 3\n  ) +\n  geomtextpath::geom_textcurve(\n    x = mean_xy_2019$Rank - .04,\n    y = mean_xy_2019$Score - 1,\n    xend = 2,\n    yend = 20,\n    curvature = .1,\n    hjust = .5,                                      # label at start (1), end (0), or other (.5 = center)  \n    vjust = 0,\n    col = \"black\",\n    arrow = arrow(ends = \"first\"),\n    label = \"mean\"                                   # label required (this replaces annotate() layer)\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n**Warning:** If your label is too long, fore example `\"overall mean\"`, R will throw an error. \n\n`Error: Cannot create zero-length unit vector (\"unit\" subsetting)`\n\n\n### Defining an `arrow()`\n\nLet's make an arrow to reuse. The default is ugly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_arrow <- arrow(angle = 20,              \n                  length = unit(0.25,\"cm\"),\n                  ends = \"first\",          \n                  type = \"closed\"          \n                  )\n```\n:::\n\n\nYou can change the font `size` to a smaller value, for example, `size = 2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey20\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 3\n  ) +\n  geomtextpath::geom_textcurve(\n    x = mean_xy_2019$Rank - .04,\n    y = mean_xy_2019$Score - 1,\n    size = 2,\n    xend = 2,\n    yend = 20,\n    curvature = .1,\n    hjust = .5,                                      # label at start (1), end (0), or other (.5 = center)  \n    vjust = 0,\n    col = \"black\",\n    arrow = my_arrow,\n    label = \"overall mean\"                                      # label required (this replaces annotate() layer)\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nOK, too small. You can also change the length to the curve or line by changing `xend` and `yend`. Also, accepting the default justification serves you well enough, so let's comment out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot +\n  annotate(geom = \"point\", \n           col = \"grey40\",\n           x = mean_xy_2019$Rank, \n           y = mean_xy_2019$Score, \n           size = 2\n  ) +\n  geomtextpath::geom_textcurve(\n    x = mean_xy_2019$Rank - .04,\n    y = mean_xy_2019$Score - 1,\n    #size = 2,\n    xend = 1.5,\n    yend = 20,\n    curvature = 0,\n#    hjust = .5,                                      # label at start (1), end (0), or other (.5 = center)  \n#    vjust = 0,\n    col = \"grey40\",\n    arrow = my_arrow,\n    fontface = \"bold\",\n    label = \"overall mean\"                                      # label required (this replaces annotate() layer)\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### `geomtextpath::geom_textcurve()` with a new data frame\n\nIn the previous example, we set the coordinates from outside of `aes()`. This was done to show you that you could control the coordinates manually. In this example, we will take a new data frame and set `data = best_2019`. We will map `x` and `y` and then set `xmin` and `ymin` either because they do not exist in the data frame or because we just don't want to map them. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(Year == 2019) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       col = Team\n                       )\n         ) +\n  geom_point(size = 2.2,\n             alpha = .75,\n             position = position_jitter(height = 0, width = .1, seed = 167)\n             ) +\n  ylim(0, 60) +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12)   # y-axis size\n        ) +\n  geomtextpath::geom_textcurve(\n    data = best_2019,                           # the data frame with the best athlete\n    mapping = aes(x = Rank,\n                  y = Score,\n                  label = paste(Score, Athlete, sep = \"m  \")\n                  ),\n    xend = 3.5,\n    yend = 60,\n    size = 3,\n    curvature = -.1,\n    arrow = my_arrow,\n    col = \"black\"\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n**Note:** With **{geomtextpath}** text objects, if you receive the following error: `Error: Cannot create zero-length unit vector (\"unit\" subsetting)`, this may reflect that your plot space in RStudio is too small to render the object correctly. Your code may not be in error. Simply increase the size of your plot space environment in RStudio.\n\n\n### `geomtextpath::geom_labelcurve()`\n\nSame thing using `geomtextpath::geom_labelcurve()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(Year == 2019) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       col = Team\n                       )\n         ) +\n  geom_point(size = 2.2,\n             alpha = .75,\n             position = position_jitter(height = 0, width = .1, seed = 167)\n             ) +\n  ylim(0, 60) +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12)   # y-axis size\n        ) +\n  geomtextpath::geom_labelcurve(\n    data = best_2019,                             # the data frame with the best athlete\n    mapping = aes(x = Rank,\n                  y = Score,\n                  label = paste(Score, Athlete, sep = \"m  \")\n                  ),\n    xend = 3.5,\n    yend = 60,\n    size = 3,\n    curvature = -.1,\n    arrow = my_arrow,\n    col = \"black\",\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nOne issue with `geom_textcurve()` and `geom_labelcurve()` is the difficulty controlling the size of the content and the length of the line. \n\n### `geomtextpath::geom_textline()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(Year == 2019) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       col = Team\n                       )\n         ) +\n  geom_point(size = 2.2,\n             alpha = .75,\n             position = position_jitter(height = 0, width = .1, seed = 167)\n             ) +\n  ylim(0, 60) +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12)   # y-axis size\n        ) +\n  geomtextpath::geom_textline(\n    data = best_2019,                             # the data frame with the best athlete\n    mapping = aes(x = Rank,\n                  y = Score,\n                  label = paste(Score, Athlete, sep = \"m  \")\n                  ),\n    size = 3,\n    col = \"black\",\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nBut the line is directly over the point. You can add values to `x` and `y` to move it. For example, `aes(x = Score + 2, ...)` but that might still look odd without an arrow. This adjustment is nevertheless made in the next example using `geom_labelline()`.\n\n### `geomtextpath::geom_labelline()`\n\nIf you want to `geomtextpath::geom_labelline()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(Year == 2019) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       col = Team\n                       )\n         ) +\n  geom_point(size = 2.2,\n             alpha = .75,\n             position = position_jitter(height = 0, width = .1, seed = 167)\n             ) +\n  ylim(0, 60) +\n  theme(axis.text.x = element_text(size = 12),  # x-axis size\n        axis.text.y = element_text(size = 12)   # y-axis size\n        ) +\n  geomtextpath::geom_labelline(\n    data = best_2019,                             # the data frame with the best athlete\n    mapping = aes(x = Rank,\n                  y = Score + 5,\n                  label = paste(Year, \" Top Athlete\\n\", Score, \"m \", Athlete, sep = \"\"),\n                  ),\n    size = 4,\n#    fontface = \"bold\",\n    col = \"black\",\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n# **Drawing attention to plot elements**\n\nIf you need to draw attention to a particular group level, one way is to add colors as a vector in the data frame and then map that vector to an aesthetic. This example shows how to do this by `fill` but you can address with other aesthetics too.\n\n## **Drawing attention to a bar**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  group_by(Rank) |>\n  summarize(Score = mean(Score, na.rm = T)) |>\n  mutate(Rank_Color = case_when(\n    Rank == 1 ~ \"goldenrod\",\n    Rank >  1 ~ \"grey60\",\n    TRUE ~ \"grey60\"\n    )) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       fill = Rank_Color\n                       )\n         ) +\n  geom_col() +\n  scale_fill_identity()\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n## **Drawing attention to a bar using {gghighlight}**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  group_by(Rank) |>\n  summarize(Score = mean(Score, na.rm = T)) |>\n  ungroup() |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       fill = factor(Rank)\n                       )\n         ) +\n  geom_col() +\n  gghighlight(Score > 45, \n              unhighlighted_params = list(fill = \"black\")\n              )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## **Fading out bars by mapping a variable to `alpha`**\n\nWe will just adjust alpha in the data frame by the conditional.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  group_by(Rank) |>\n  summarize(Score = mean(Score, na.rm = T)) |>\n  ungroup() |>\n  mutate(\n    cutoff = 41,\n    Alpha = case_when(\n      Score <= cutoff ~ .5,\n      TRUE ~ 1\n  )) |>\n  ggplot(mapping = aes(x = Rank, \n                       y = Score,\n                       fill = factor(Rank),\n                       alpha = Alpha\n                       )\n         ) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n# **Drawing attention to points**\n\nDrawing attention to points can be accomplished in different ways. You may wish to color code certain points, change the alpha of certain points, make the shape distinctive, make the stroke thicker, etc. Much of this can be done by making variables directly in the data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  mutate(Rank_Color = ifelse(Rank == 1,  \"goldenrod\", \"black\")) |>\n  mutate(Rank_Color = case_when(\n    Rank == 1 ~ \"goldenrod\",\n    Rank >  1 ~ \"grey60\",\n    TRUE ~ \"grey60\"\n  )) |>\n  mutate(Rank_Alpha = case_when(\n    Rank == 1 ~ 1,\n    Rank >  1 ~ .7,\n    TRUE ~ .2\n  )) |>\n  filter(Team == \"Athena\") |>\n  group_by(Year, Athlete) |>\n  mutate(Season_Mean = mean(Score, na.rm = T), .groups = \"keep\") |>\n  ungroup() |>\n  select(-c(Meet, Date, Score, .groups)) |> \n  distinct() |>\n  ggplot(mapping = aes(x = Year, \n                       y = Season_Mean,\n                       col = Rank_Color,\n                       alpha = Rank_Alpha\n                       )\n         ) +\n  geom_point(size = 2,\n             position = position_jitter(height = 0, width = .2, seed = 167),\n             ) +\n  scale_x_continuous(breaks = seq(2009, 2023, 1)) +\n  coord_flip() +\n  scale_color_identity() +\n  scale_alpha_identity() +\n  labs(title = \"Season averages for Athenas in event x across years\",\n       subtitle = \"<span style = 'color:goldenrod'>Freshman</span> are not always at the bottom of the pack and may sometimes be best\") +\n  theme(plot.title = element_markdown(face = \"bold\"),\n        plot.subtitle = element_markdown(face = \"italic\"),\n        )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nSimilar plot with data from all meets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  mutate(Rank_Color = ifelse(Rank == 1,  \"goldenrod\", \"black\")) |>\n  mutate(Rank_Color = case_when(\n    Rank == 1 ~ \"goldenrod\",\n    Rank >  1 ~ \"grey60\",\n    TRUE ~ \"grey60\"\n  )) |>\n  mutate(Rank_Alpha = case_when(\n    Rank == 1 ~ 1,\n    Rank >  1 ~ .7,\n    TRUE ~ .2\n  )) |>\n  filter(Team == \"Athena\") |>\n  ggplot(mapping = aes(x = Year, \n                       y = Score,\n                       col = Rank_Color,\n                       alpha = Rank_Alpha\n                       )\n         ) +\n  geom_point(size = 2,\n             position = position_jitter(height = 0, width = .2, seed = 167),\n             ) +\n  scale_x_continuous(breaks = seq(2009, 2023, 1)) +\n  coord_flip() +\n  scale_color_identity() +\n  scale_alpha_identity() +\n  labs(title = \"Athenas' individual meet performances in event x across years\",\n       subtitle = \"<span style = 'color:goldenrod'>Freshman</span> are not always at the bottom of the pack and may sometimes be best.\") +\n  theme(plot.title = element_markdown(face = \"bold\"),\n        plot.subtitle = element_markdown(face = \"italic\"),\n        )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nHow about if you wanted to track the best performers over time. Or the single best athlete for an event. \n\nHere is just a simple example for highlighting athletes by particular performance metric. Identify the names of the athletes who performed the best in any year (e.g., `max()`) and those to have the worst average (e.g., something like `min(median(x))` because one could just have a flop as a minimum). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n(best_names <- DATA |>\n  group_by(Year, Team) |>\n  slice_max(Score) |> \n  ungroup()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 × 7\n   Athlete            Rank Score Meet                          Date  Team   Year\n   <chr>             <dbl> <dbl> <chr>                         <chr> <chr> <dbl>\n 1 Guang, Bonny          2  41.6 Cal Lu - CMS - La Verne - Wh… Mar … Athe…  2010\n 2 Berliant, Taylor      3  61.0 SCIAC Quad Meet               Apr … Stag   2010\n 3 Berliant, Taylor      4  61.6 2011 NCAA Division III Outdo… May … Stag   2011\n 4 Kroll, Jackie        NA  35.7 2012 Pomona-Pitzer T&F Invite Apr … Athe…  2012\n 5 Gage, Chris          NA  53.4 Chapman/CMS/Pomona-Pitzer/Re… Mar … Stag   2012\n 6 Kroll, Jackie         2  37.7 SCIAC Quad Meet               Apr … Athe…  2013\n 7 Hobbs, Nicholas       3  53.6 Oxy Invitational              May … Stag   2013\n 8 Laliberte, Nicole     1  42.4 SCIAC Multi Duals Meet #3     Apr … Athe…  2014\n 9 Rich, Alex            2  51.0 2014 Pomona-Pitzer T&F All C… Feb … Stag   2014\n10 Bassett, Emily        1  51.0 Pomona-Pitzer/Whittier/La Ve… Mar … Athe…  2015\n# ℹ 15 more rows\n```\n:::\n:::\n\n\nThen get the best athlete and highlight points along with a label using repelled text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the best performance\nbest_athlete <- best_names |> slice_max(Score) \n\n# OK, use regular expression to rearrange the name\nbest_athlete_clean <- stringr::str_replace(best_athlete$Athlete, \"^(\\\\w+),\\\\s(\\\\w+)\", \"\\\\2 \\\\1\")\n\n# make title using the name\nplot_title <- paste0(\"<span style = 'color:grey60'>Stag</span> and <span style = 'color:goldenrod'>Athena</span> meet performances in event x across years\")\n\nplot_subtitle <- paste0(\"The best athlete, \", best_athlete_clean,\n                        \", improves over the years and can have bad days\"\n                        )\n\n# then plot\nDATA |>\n  mutate(Point_Color = case_when(\n    Team == \"Stag\"   & Athlete != best_athlete$Athlete ~ \"grey60\",\n    Team == \"Stag\"   & Athlete == best_athlete$Athlete ~ \"firebrick\",\n    Team == \"Athena\" & Athlete != best_athlete$Athlete ~ \"goldenrod\",\n    Team == \"Athena\" & Athlete == best_athlete$Athlete ~ \"firebrick\",\n  )) |>\n  mutate(Point_Alpha = case_when(\n    Athlete == best_athlete$Athlete ~ 1,\n    TRUE ~ .5\n  )) |> \n  ggplot(mapping = aes(x = Year, \n                       y = Score,\n                       col = Point_Color,\n                       alpha = Point_Alpha\n                       )\n         ) +\n  geom_point(size = 2,\n             position = position_jitter(height = 0, width = .2, seed = 167),\n             ) +\n  scale_x_continuous(breaks = seq(2009, 2023, 1)) +\n  coord_flip() +\n  # add the identity aesthetics\n  scale_color_identity() +\n  scale_alpha_identity() +\n  # add the titles\n  labs(title = plot_title,\n       subtitle = plot_subtitle\n       ) +\n  # render as html\n  theme(plot.title = element_markdown(face = \"bold\"),\n        plot.subtitle = element_markdown(face = \"italic\"),\n        ) +\n  # using the best athlete, plot label\n  ggrepel::geom_text_repel(data = best_athlete,\n                           mapping = aes(x = Year, \n                                         label = Athlete\n                                         ),\n                           size = 3.5,\n                           col = \"firebrick\",\n                           alpha = 1,\n                           fontface = \"bold\",\n                           box.padding = 1,\n                           hjust = 1,\n                           vjust = 1,\n                           segment.colour = \"firebrick\"\n  )\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n## **Highlighting lines**\n\nYou can use `geomtextpath::geom_labelline()` to label lines. In this example, we label lines with athlete names. Specifically, we will group and obtain best scores for each athlete's participating year then get the count for rows and filter for athletes who participated in all 4 years. \n\n```\ngroup_by(Athlete, Rank) |>\nsummarize(Max_Score = max(Score), .groups = \"keep\") |>\ngroup_by(Athlete) |>\nmutate(Count = n()) |>\nfilter(Count == 4) \n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  mutate(Point_Color = case_when(\n    Team == \"Stag\" ~ \"grey60\",\n    Team == \"Athena\" ~ \"goldenrod\",\n  )) |>\n  group_by(Athlete, Rank) |>\n  summarize(Max_Score = max(Score), .groups = \"keep\") |>\n  group_by(Athlete) |>\n  mutate(Count = n()) |>\n  filter(Count == 4) |>\n  ggplot(mapping = aes(x = Rank,\n                       y = Max_Score,\n                       col = Athlete\n                       )\n         ) +\n  geom_point(size = 2) + \n  geom_line(linewidth = 1) +\n  geomtextpath::geom_labelline(\n    mapping = aes(label = stringr::str_replace(\n      Athlete, \"^(\\\\w+),\\\\s(\\\\w+)\", \"\\\\2 \\\\1\")\n    ))\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## **Highlighting with {gghighlight}**\n\nClearly, the legend is no longer needed so that could be removed. Also, the name labels are a bit of a mess. One approach is to use **{gghighlight}** and `gghighlight::gghighlight()` which by default will move the labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  mutate(Point_Color = case_when(\n    Team == \"Stag\" ~ \"grey60\",\n    Team == \"Athena\" ~ \"goldenrod\",\n  )) |>\n  group_by(Athlete, Rank) |>\n  summarize(Max_Score = max(Score), .groups = \"keep\") |>\n  group_by(Athlete) |>\n  mutate(Count = n()) |>\n  filter(Count == 4) |>\n  ggplot(mapping = aes(x = Rank,\n                       y = Max_Score,\n                       col = Athlete\n                       )\n         ) +\n  geom_point(size = 2) + \n  geom_line(linewidth = 1) +\n  gghighlight::gghighlight()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nlabel_key: Athlete\n```\n:::\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## **Highlighting specific data with {gghighlight}**\n\n`gghighlight::gghighlight()` will take expressions for filtering the data. We can highlight subsets of the data based on a function we pass. \n\nFor example, `mean(Mean_Score) > 45` will highlight lines for which the condition is met.\n\n- `gghighlight::gghighlight(mean(Mean_Score) > 45)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  mutate(Point_Color = case_when(\n    Team == \"Stag\" ~ \"grey60\",\n    Team == \"Athena\" ~ \"goldenrod\",\n  )) |>\n  group_by(Athlete, Rank) |>\n  summarize(Mean_Score = mean(Score), \n            Max_Score = max(Score),\n            .groups = \"keep\") |>\n  group_by(Athlete) |>\n  mutate(Count = n()) |>\n  filter(Count == 4) |>\n  ggplot(mapping = aes(x = Rank,\n                       y = Max_Score,\n                       col = Athlete\n                       )\n         ) +\n  # add point plot\n  geom_point(size = 2) + \n  # add a line plot\n  geom_line(linewidth = 1) +\n  # highlight conditions met\n  gghighlight::gghighlight(mean(Mean_Score) > 45) +\n  labs(title = \"My Title\",\n       subtitle = \"Out of the 5 athletes who participated all college years, only two maintained an average higher than 45 across meets each year\") +\n  theme(plot.title = element_markdown(face = \"bold\"),\n        plot.subtitle = element_markdown(face = \"italic\"),\n        )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nlabel_key: Athlete\n```\n:::\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n# **Drawing attention to a plot region**\n\nFor various reasons, you may wish to draw attention to a particular region of a data visualization. Perhaps you want to highlight a time period of interest create an confidence interval band to frame out the data. We will address some ways you can do this using `annotate()` and `geom_rect()` but you could also apply other functions like `geom_ribbon()`, `geom_tile()`, or `geom_polygon()` in similar ways.\n\n\n## **Highlighting a region using `annotate()`**\n\nUsing `geom = \"text\"`, you can annotate the plot with a rectangle to represent an area of interest. You can think of To draw a rectangle to highlight an area of interest in three useful ways. \n\n1. To highlight a vertical band stretching the entire y-axis, beginning and ending at x-axis locations. \n2. To highlight a horizontal band stretching the entire x-axis, beginning and ending y-axis locations. \n3. To highlight a rectangle, beginning and ending x-axis and y-axis locations\n\nBonus: You can create more than one of any of the preceding. \n\n### **Highlighting a slice of the x-axis using `annotate()`**\n\nFor this, we will specify:\n\n- `xmin`: beginning point of x\n- `xmax`: ending point of x\n- `ymin`: beginning point of y  \n- `ymax`: ending point of y\n- `fill`: the color inside the rectangle\n- `alpha`: the alpha of the fill color inside the rectangle\n- `col`: the line border of the rectangle\n- `linewidth`: the line thickness of the border \n- `linetype`: the type of the line border\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  ggplot(mapping = aes(x = Year,\n                       y = Score\n                       )\n         ) +\n  # add point plot\n  geom_point(size = 2,\n             alpha = .3,\n             position = position_jitter(height = 0, width = .25, seed = 167)\n  ) +\n  scale_x_continuous(breaks = seq(2010, 2023, 1)) +\n  # make the rectangle\n  annotate(geom = \"rect\", \n           xmin = 2012.5,            # beginning point of x\n           xmax = 2013.5,            # ending point of x\n           ymin = -Inf,              # make the rectangle extend along y  \n           ymax = Inf,               # make the rectangle extend along y\n           fill = \"goldenrod\",       # the color inside the rectangle\n           alpha = 0.25,             # the alpha of the fill color inside the rectangle\n           col = \"black\",            # the line border of the rectangle\n           linewidth = .5,           # the line thickness of the border \n           linetype = \"solid\"        # the type of the line border\n           ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### **Highlighting a slice of the y-axis using `annotate()`**\n\nSome elements of the rectangle are removed here and the `annotate()` layer is added before the points to remind you that layers build on top of each other. Even with transparency of the fill of the rectangle, adding the layer after previous geoms (points in this instance) will result in a visualization that creates the perception of the rectangle covering, and thus, adding color to, the points behind it. If you wish the highlighted region to fade into the background and allow the points to float on top of the rectangle, make sure that your layer order achieves that goal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  ggplot(mapping = aes(x = Year,\n                       y = Score\n                       )\n         ) +\n  # make the rectangle\n  annotate(geom = \"rect\", \n           xmin = -Inf,           # beginning point of x\n           xmax = Inf,            # ending point of x\n           ymin = 55,             # make the rectangle extend along y  \n           ymax = 65,             # make the rectangle extend along y\n           fill = \"goldenrod\",    # the color inside the rectangle\n           alpha = 0.25           # the alpha of the fill color inside the rectangle\n           ) +\n  # add point plot\n  geom_point(size = 2,\n             alpha = .3,\n             position = position_jitter(height = 0, width = .25, seed = 167)\n  ) +\n  scale_x_continuous(breaks = seq(2010, 2023, 1)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n### **Highlighting a slice of the y-axis using `geom_rect()`**\n\nUsing `annotate()` along with `geom = \"rect\"`. However, you can certainly use `geom_rect()` to build a rectangle. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(!is.na(Rank)) |>\n  ggplot(mapping = aes(x = Year,\n                       y = Score\n                       )\n         ) +\n  # add the rectangle\n  geom_rect(xmin = -Inf, \n            xmax = Inf,\n            ymin = 55,         \n            ymax = 65,         \n            fill = \"goldenrod\", \n            alpha = .25,              # same alpha\n            ) +\n  # add point plot\n  geom_point(size = 2,\n             alpha = .3,\n             position = position_jitter(height = 0, width = .25, seed = 167)\n  ) +\n  scale_x_continuous(breaks = seq(2010, 2023, 1)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nNotice the color differences. We will address this curiosity later. \n\n\n### **Highlighting a rectangle using `annotate()`**\n\nWhen you have a rectangular area of interest, build an actual rectangle. We will also create a data summary based on a subset of athletes and years to obtain the 95% confidence interval for all performances during those years. There is no particular reason those this type of data but this could represent a significant time period.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA_CI95 <- DATA |>\n  filter(Team == \"Stag\") |>             # get stag only\n  filter(!is.na(Rank)) |>\n  filter(Year %in% c(2016:2020)) |>\n  summarize(xmin = min(Year),\n            xmax = max(Year),\n            ymin = mean(Score, na.rm = T) - (1.96 * sd(Score, na.rm = T)),\n            ymax = mean(Score, na.rm = T) + (1.96 * sd(Score, na.rm = T)),\n            )\n\n\nDATA |>\n  filter(Team == \"Stag\") |>\n  filter(!is.na(Rank)) |>\n  ggplot(mapping = aes(x = Year,\n                       y = Score\n                       )\n         ) +\n  # build the rectangle based on the subset summary\n  annotate(geom = \"rect\",\n           xmin = DATA_CI95$xmin - .5, # add a buffer to highlight the jittered points\n           xmax = DATA_CI95$xmax + .5, # add a buffer to highlight the jittered points\n           ymin = DATA_CI95$ymin,         \n           ymax = DATA_CI95$ymax,         \n           fill = \"firebrick\", \n           alpha = .25,              \n           ) +\n  # add point plot\n  geom_point(size = 2,\n             alpha = .3,\n             position = position_jitter(height = 0, width = .25, seed = 167)\n  ) +\n  scale_x_continuous(breaks = seq(2010, 2023, 1))\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nDuring this time period, you can see there are a few event performances (not athletes) outside this confidence section. However, in other years, there some performances that fall quite above that range. \n\n### **Highlighting two slices of the x-axis using `annotate()`**\n\nBecause `Year` and `Score` are mapped already, we can simply create these two variables in the data frame. If they are not in the data frame, you will get an error and need to troubleshoot. Adding them is a simple solution. As long as the variable type created is the same as the variable in the other data frame, you will be OK. In this instance, we can just add a numeric value that is within the plot coordinates. The mean will ensure this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(DATA_topbottom <- DATA |>\n  filter(Team == \"Stag\") |>             # get stag only\n  filter(!is.na(Rank)) |>\n  mutate(Decile = ntile(Score, 10)) |>\n  group_by(Decile) |>\n  summarize(xmin = -Inf,\n            xmax = Inf,\n            ymin = min(Score, na.rm = T),\n            ymax = max(Score, na.rm = T),\n            Year = mean(Year, na.rm = T),   # a numeric value needs to be added \n            Score = mean(Score, na.rm = T)  # a numeric value needs to be added \n            ) |> \n  ungroup() |>\n  filter(Decile %in% c(1,10))   # keep data in the top and bottom decile\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 7\n  Decile  xmin  xmax  ymin  ymax  Year Score\n   <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1      1  -Inf   Inf  5.32  33.9 2017.  29.7\n2     10  -Inf   Inf 51.0   61.6 2013.  55.0\n```\n:::\n:::\n\n\nWe now have a data frame with two rows, one for the top decile and one for the bottom. Let's add a `geom_rect()` and specify `data = DATA_topbottom` and then map the variables to the required aesthetics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDATA |>\n  filter(Team == \"Stag\") |>\n  filter(!is.na(Rank)) |>\n  ggplot(mapping = aes(x = Year,\n                       y = Score\n                       )\n         ) +\n  # build the rectangle based on new data\n  geom_rect(data = DATA_topbottom,\n            mapping = aes(xmin = xmin,\n                          xmax = xmax,\n                          ymin = ymin,\n                          ymax = ymax, \n                          fill = factor(Decile)\n                          ),\n            alpha = .2,              \n           ) +\n  # add point plot\n  geom_point(mapping = aes(col = factor(Year)),\n             size = 2,\n             alpha = .3,\n             position = position_jitter(height = 0, width = .25, seed = 167)\n  ) +\n  scale_x_continuous(breaks = seq(2010, 2023, 1)) +\n  coord_flip() + \n  labs(x = NULL) + \n  theme_classic() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](24_attentional_control_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nRemoving the legend and instead either direct labeling the deciles or using color in the title to clarify them will help communicate the intent of these bands without the legend taking up so much real estate. And of course, you could add a color variable to the data frame and `scale_color_identity()` the color for the 1st and 10th decile. If you are already using color for the points, then coloring them would be challenging. You could use filled shapes and add a black color ring around them or change the stroke. But using a rectangle might serve a useful purpose. Whatever you do to draw attention to plot elements, ensure that your audience understands your intent.\n\n\n### **Comparing `annotate()` versus `geom_rect()`**\n\nWhy introduce you to both approaches if they can achieve the same outcome? Well, notice the difference between the rectangle added with `annotate()` and `geom_rect()` when the alpha is the same. Although `alpha = .25` in both some instances, `geom_rect()` draws a darker rectangle. \n\nWhy? Remember that geoms will iterate for each row in the data frame. Because the variables are mapped to aesthetics in `geom_rect()`, the rectangle is built over and over again. You can experience this with the time required to build the plot when there are many rows. If you want more control over alpha, you might consider `annotate()`.\n\n\n# **Session Info**\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.1 (2023-06-16 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 11 x64 (build 22621)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Los_Angeles\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggtext_0.1.2       gghighlight_0.4.0  geomtextpath_0.1.1 ggrepel_0.9.3     \n[5] ggplot2_3.4.3      magrittr_2.0.3     dplyr_1.1.2       \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.4      jsonlite_1.8.7    compiler_4.3.1    tidyselect_1.2.0 \n [5] Rcpp_1.0.11       stringr_1.5.0     xml2_1.3.5        systemfonts_1.0.4\n [9] scales_1.2.1      textshaping_0.3.6 yaml_2.3.7        fastmap_1.1.1    \n[13] here_1.0.1        R6_2.5.1          commonmark_1.9.0  labeling_0.4.2   \n[17] generics_0.1.3    knitr_1.43        htmlwidgets_1.6.2 tibble_3.2.1     \n[21] munsell_0.5.0     rprojroot_2.0.3   pillar_1.9.0      rlang_1.1.1      \n[25] utf8_1.2.3        stringi_1.7.12    xfun_0.40         cli_3.6.1        \n[29] withr_2.5.0       gridtext_0.1.5    digest_0.6.33     grid_4.3.1       \n[33] rstudioapi_0.15.0 markdown_1.8      lifecycle_1.0.3   vctrs_0.6.3      \n[37] evaluate_0.21     glue_1.6.2        farver_2.1.1      fansi_1.0.4      \n[41] colorspace_2.1-0  purrr_1.0.2       rmarkdown_2.24    tools_4.3.1      \n[45] pkgconfig_2.0.3   htmltools_0.5.6  \n```\n:::\n:::\n",
    "supporting": [
      "24_attentional_control_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}