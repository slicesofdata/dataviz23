[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Nothing to see here"
  },
  {
    "objectID": "homework/homework.html",
    "href": "homework/homework.html",
    "title": "Homework",
    "section": "",
    "text": "Under construction\n\n\n\nThis syllabus is under construction until Fall 2023"
  },
  {
    "objectID": "homework/homework.html#exercises",
    "href": "homework/homework.html#exercises",
    "title": "Homework",
    "section": "Exercises",
    "text": "Exercises\nVarious tasks and exercises will be found here.\nThe exercise list will be updated as the semester progresses."
  },
  {
    "objectID": "homework/homework.html#download",
    "href": "homework/homework.html#download",
    "title": "Homework",
    "section": "Download",
    "text": "Download\nHomework Exercise 01"
  },
  {
    "objectID": "index.html#psyc-167-data-visualization",
    "href": "index.html#psyc-167-data-visualization",
    "title": "**PSYC167**",
    "section": "PSYC 167: Data Visualization",
    "text": "PSYC 167: Data Visualization\nThis is the course website for PSYC 167: Data Visualization, taught by Prof. Gabriel I. Cook; 1 credit\nDescription\nData visualization is the science and art of creating graphical representations of information and data. Visual representations provide accessible ways to see patterns, trends, and outliers in data. Variables like position, size, and orientation can focus attention and guide perception but can also bias interpretation of data. Students will learn how well-designed visualizations can reduce bias and improve comprehension for data thereby facilitating data-driven decision-making. Students will explore techniques for creating effective visualizations based on principles from cognitive and perceptual psychology, art, and design. Students will gain hands-on experience coding real-world data visualizations for local offices, organizations, and industry participants.\nThe course is targeted toward students with expressed interest in cognition and cognitive biases related to data communication, students interested in using visualization to communicate their own messages, and students interested in creating better visualization tools and systems. Students will engage in discussions of the readings, complete programming and data analysis assignments, and prepare a final project involving storytelling with data visualizations."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html",
    "title": "{ggplot} and the grammar of graphics",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#readings",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#readings",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Introduction to Vizualization\nWilke (2019). Fundamentals of Data Visualization. Aesthetic Mapping\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Introduction\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Understanding the Grammar\n\nOptional (more on the grammar):\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Build a plot layer by layer"
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#load-libraries",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#load-libraries",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Load libraries",
    "text": "Load libraries\n\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(ggplot2)"
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#external-functions",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#external-functions",
    "title": "{ggplot} and the grammar of graphics",
    "section": "External Functions",
    "text": "External Functions\nProvided in class:\nview_html(): for viewing data frames in html format, from /r/my_functions.R\nYou can use this in your own workspace but I am having a challenge rendering this of the website, so I’ll default to print() on occasion.\n\nsource(here::here(\"r\", \"my_functions.R\"))"
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#ggplot-plot-composition",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#ggplot-plot-composition",
    "title": "{ggplot} and the grammar of graphics",
    "section": "{ggplot} Plot Composition",
    "text": "{ggplot} Plot Composition\nThere are five mapping components:\n\nLayer containing geometric elements and statistical transformations:\n\n\nData a tidy data frame, most typically in long/narrow format\nMapping defining how vector variables are visualized (e.g., aesthetics like shape, color, position, hue, etc.)\nStatistical Transformation (stat) representing some summarizing of data (e.g., sums, fitted curves, etc.)\nGeometric object (geom) controlling the type of visualization\nPosition Adjustment (position) controlling where visual elements are positioned\n\n\nScales that map values in the data space to values in aesthetic space\nA Coordinate System for mapping coordinates to the plane of a graphic\nA Facet for arranging the data into a grid; plotting subsets of data\nA Theme controlling the niceties of the plot, like font, background, grids, axes, typeface etc.\n\nThe grammar does not:\n\nMake suggestions about what graphics to use\nDescribe interactivity with a graphic; {ggplot2} graphics are static images, though they can be animated"
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#initializing-the-plot-object",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#initializing-the-plot-object",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Initializing the Plot Object",
    "text": "Initializing the Plot Object\nWhat is a ?ggplot object? Review the docs first. Let’s apply the base layer using ggplot(). This function takes a data set and simply initializes the plot object so that you can build other components on top of it. By default, data = NULL so, you will need to pass some data argument. There is also a mapping parameter for mapping the aesthetics of the plot, by default, mapping = aes(). If you don’t pass a data frame to data, what happens?\n\nggplot()\n\n\n\n\nAn object is created but it contains no data. The default is some rectangle in space."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#passing-the-data-to-ggplot",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#passing-the-data-to-ggplot",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Passing the Data to ggplot()",
    "text": "Passing the Data to ggplot()\nYou cannot have a plot without data, so we need some data in a tidy format. We can read in a data set or create one.\n\nSWIM &lt;- readr::read_csv(here::here(\"data\", \"cleaned-cms-top-all-time-2023-swim.csv\"))\n\nRows: 440 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): name, year, event, team\ndbl (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nDATA &lt;- data.frame(\n A = c(1, 2, 3, 4), \n B = c(2, 5, 3, 8), \n C = c(10, 15, 32, 28), \n D = c(\"Task A\", \"Task A\", \"Task B\", \"Task B\"),\n E = c(\"circle\", \"circle\", \"square\", \"square\")\n)\n\nLet’s also quickly change the variable names to titlecase() so that the first letter is capitalize.\n\nnames(SWIM) &lt;- tools::toTitleCase(names(SWIM))\n\nNow we can pass this data frame to data.\n\nggplot(data = SWIM)\n\n\n\n\nOK, so still nothing. That’s because we haven’t told ggplot() what visual properties or aesthetics to include in the plot. Importantly, you do not have to provide this information in a base layer. {ggplot2} is flexible insofar as you can pass data in different places depending what data you want to use and at which layer on how you will use it.\nIf you set data = SWIM, the subsequent layers of the plot will inherit that data frame if you do not pass the argument in a different layer. However, you are not limited to passing only one data set. You might wish to plot the aesthetics of one data frame in one layer and then add another layer of aesthetics taken from a different data frame. TLDR; you can pass data, or not pass data, in the initialization of the base layer."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#scalingscale-transformation",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#scalingscale-transformation",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Scaling/Scale Transformation",
    "text": "Scaling/Scale Transformation\n\nprint(SWIM)\n\n# A tibble: 440 × 5\n    Time Name             Year  Event   Team  \n   &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n 1  1409 Jocelyn Crawford 2019  50 FREE Athena\n 2  1411 Ava Sealander    2022  50 FREE Athena\n 3  1429 Kelly Ngo        2016  50 FREE Athena\n 4  1451 Helen Liu        2014  50 FREE Athena\n 5  1456 Michele Kee      2014  50 FREE Athena\n 6  1457 Natalia Orbach-M 2020  50 FREE Athena\n 7  1457 Suzia Starzyk    2020  50 FREE Athena\n 8  1467 Katie Bilotti    2010  50 FREE Athena\n 9  1473 Jenni Rinker     2011  50 FREE Athena\n10  1442 Annika Sharma    2023  50 FREE Athena\n# ℹ 430 more rows\n\n\nLooking at the data, we have a tidy file composed of columns and rows. Looking at the data frame, you see the ‘identity’ of each case. This term is important to {ggplot}. By identity we mean variables are a numeric value, character, or factor. What you see in the data frame is the identity of the variables. Of course, we can change the identity of a variable in some way by transforming the values to z scores, log values, or each average them together to take their count and then plot any of those data. But those transformations do not represent true identities as they appear in a data set.\nIn order to take the data units in the data frame so that they can be represented as physical units on a plot (e.g., points, bars, lines, etc.), there needs to be some scaling transformation. The plot function needs to understand how many pixels high and wide to create a plot and the plot needs to know the limits of the axes for example. Similarly, the plot function needs to know what shapes to present, how many, etc. By default, the statistical transformation is an ‘identity’ transformation, or one that just takes the values and plots them as their appear in the data (their identity). More on this when we start plotting."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#choosing-a-coordinate-system",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#choosing-a-coordinate-system",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Choosing a Coordinate System",
    "text": "Choosing a Coordinate System\nAll we have now is the base layer that is taking on some coordinates. For example, where are the points plotted on the plot? The system can follow the Cartesian coordinate system or a Polar coordinate system. An example of this will follow later. For now, the default is chosen for you. What might you think it is?"
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#adding-aesthetic-mappings",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#adding-aesthetic-mappings",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Adding Aesthetic Mappings",
    "text": "Adding Aesthetic Mappings\nIf you wanted your plot geometry (the geom() you add later) to inherit properties of the initialized base layer, you could pass aesthetics to the mapping argument mapping = aes() in the ggplot() function. Notice that the argument that we pass to mapping is another function, aes().\nFor example:\n\nggplot(data = SWIM, mapping = aes())\n\n\n\n\nBut this still does not present anything you can see. You might have guessed that the reason you do not see anything is because nothing was passed to aes(). Here is where you map data to aesthetics by specifying the variable information and passing them to aes(). Looking at ?aes, we see that aes() maps how properties of the data connect to, or map, onto with the features of the visualization (e.g., axis position, color, size, etc.). The aesthetics are the visual properties of the visualization, so they are essential to map by passing arguments to aes().\nHow many and what variables do pass? Looking at ?aes, you see that x and y are needed.\nBecause we passed data = SWIM in ggplot(), we can reference the variables by their column names without specifying the data frame.\nIf x = Year and y = Time:\n\nggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       )\n\n\n\n\nOK, now we can see something. Although this is progress, what is visible is rather empty and ugly. We can see that the aesthetic layer now applied to the plot scales the data to present Year along the x-axis with a range from lowest to highest value from that vector. Similarly, the mapping presents Time along the y-axis with a range from lowest to highest value in the vector. Also, the aesthetics include the variable name as a the label for the x and y axes. Of course, you can change these details later in a layer as well. More on that later.\nYou might have been tempted to pass the variable names a quoted strings (e.g., “A” and “B) but if you do that, you’ll get something different.\n\nggplot(data = SWIM, \n       mapping = aes(x = \"Year\", y = \"Time\")\n       )\n\n\n\n\nIf we want to plot the data as they are in the data frame, we would apply the ‘identity’ transformation. Again, by identity, we just need to instruct ggplot() to use the data values in the data frame. If you wanted to plot the means, frequency count, or something else, we would need to tell ggplot() how to transform the data. We are not at that point yet though."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#adding-plot-geometries",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#adding-plot-geometries",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Adding Plot Geometries",
    "text": "Adding Plot Geometries\nWe do not yet have any geometries, or geoms, added. All geom functions will take the form geom_*(). As you will see, geoms can take many forms, including, points, lines, bars, text, etc. If we want the values in Year and Time to be plotted as x and y coordinates representing points on the plot, we can add a point geometry using geom_point().\nBy adding a layer, {ggplot2} really means add, as in +. We will take the initialize plot object that contains some data along with some mapping of variables to x an y coordinates and add to it a geometry. Combined, these functions will display data which adheres to some statistical transformation at some position along some scale an in some theme.\n\nggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       ) +\n  geom_point()\n\n\n\n\nAt some point, you will want to assign the plot to an object. When you do, the plot will not actually render for you to view.\n\nmy_first_plot &lt;- ggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       ) +\n  geom_point()\n\nThen:\n\nmy_first_plot\n\n\n\n\nPro Tip: You would need to call the plot to render it as illustrated above … unless you wrap it in ().\n\n(my_first_plot &lt;- ggplot(data = SWIM, \n       mapping = aes(x = Year, y = Time)\n       ) +\n  geom_point())\n\n\n\n\nYou now have a data visualization! The points geometry, geom_point(), inherits the aesthetic mapping from above and plots them as points."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#how-and-where-to-map-aesthetics",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#how-and-where-to-map-aesthetics",
    "title": "{ggplot} and the grammar of graphics",
    "section": "How and Where to Map Aesthetics?",
    "text": "How and Where to Map Aesthetics?\nYou might be wondering how you map these aesthetic properties so that when you attempt to do so, you don’t get a bunch of errors. There are two places you can map aesthetics:\nEither in the initialized plot object:\n\nggplot(data = data, mapping = aes(x, y)) + geom_point()\n\nOr in the geometry:\n\nggplot() +geom_point(data = data, mapping = aes(x, y))\n\nWe can map aesthetics in the initialized plot object by also assigning this to an object named map just so we can reference it as need.\nWhen we do this mapping:\n\nmap &lt;- ggplot(data = SWIM, \n              mapping = aes(Year, Time))\n\nThe aesthetics are inherited by the geometries that follow, which then do not require any mapping of their own…\n\nmap + \n  geom_point() + \n  geom_line()\n\n\n\n\nBut when aesthetics are NOT mapped in initialized plot:\n\nmap &lt;- ggplot() \n\nThere are no aesthetics to be inherited by the plot geometry functions because they are not passed to the ggplot() object. In this case they must be mapped as arguments the geometries themselves.\nPlot points:\n\nmap + \n  geom_point(data = SWIM, \n             mapping = aes(Year, Time)) \n\n\n\n\nPlot a line:\n\nmap + \n  geom_line(data = SWIM, \n            mapping = aes(x = Year, y = Time))\n\n\n\n\nIn a later section, we will differentiate between setting and mapping aesthetic attributes."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#mapping-a-variable-as-is-from-the-data-frame",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#mapping-a-variable-as-is-from-the-data-frame",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Mapping a variable as-is from the data frame`",
    "text": "Mapping a variable as-is from the data frame`\nggplot() defines the data as well as variables in aes(). You can easily map the x or y variable to the geom_*().\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = Year))"
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#mapping-a-variable-that-differs-from-whats-in-the-data-frame",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#mapping-a-variable-that-differs-from-whats-in-the-data-frame",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Mapping a variable that differs from what’s in the data frame",
    "text": "Mapping a variable that differs from what’s in the data frame\nYou can also change a variable type in the scope of the plot without modifying it in the data frame. Let’s change Year to numeric to see what happens:\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = as.numeric(Year)))\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\n\n\n\n\nSimilarly, if we had a numeric variable and wanted to make a factor():\n\nSWIM &lt;- SWIM %&gt;%\n  mutate(., Year2 = as.numeric(Year))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `Year2 = as.numeric(Year)`.\nCaused by warning:\n! NAs introduced by coercion\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = as.factor(Year2)))\n\n\n\n\nOr make a character:\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = as.character(Year2)))\n\n\n\n\nYou may have noticed that when mapped variables are numeric, the aesthetics are applied continuously and when they are character (e.g., categorical, factors), they are applied discretely. Here is a good example of mapping variable Year not as itself but by changing it to a as.numeric() or changing numeric variables to either a factor() or a character vector. You might notice that the content in the legend is messy now. Fixing this is something we will work on as we progress."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#mapping-a-variable-that-is-not-defined-in-the-aes-mapping-of-ggplot",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#mapping-a-variable-that-is-not-defined-in-the-aes-mapping-of-ggplot",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Mapping a variable that is not defined in the aes() mapping of ggplot()",
    "text": "Mapping a variable that is not defined in the aes() mapping of ggplot()\nSometimes you may wish to map a variable that is not defined in ggplot(). We can map a variable that is neither x nor y:\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(aes(color = Team))\n\n\n\n\nThis is no problem because Team exists in the SWIM data passed to data in the ggplot() object."
  },
  {
    "objectID": "modules/08_ggplot_and_the_grammar_of_graphics.html#setting-and-mapping-combinations",
    "href": "modules/08_ggplot_and_the_grammar_of_graphics.html#setting-and-mapping-combinations",
    "title": "{ggplot} and the grammar of graphics",
    "section": "Setting and Mapping Combinations",
    "text": "Setting and Mapping Combinations\nWe can also combine setting aesthetics and mapping them as long as the mapping takes place outside inside aes() and the setting takes place outside.\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(color = \"maroon\", aes(shape = Team))\n\n\n\n\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(color = \"blue\", aes(size = Time))\n\n\n\n\n\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n  geom_point(shape = 21, aes(color = Event))\n\n\n\n\nImportantly, just as you cannot pass constant values as aesthetics in aes(), you cannot pass a variable to an aesthetic in the geom_*() outside of aes().\nFor example, passing color = Team outside of aes() in this instance will throw an error.\nggplot(data = SWIM, aes(x = Year, y = Time)) + \n     geom_point(color = Team)\n\nError: object 'Team' not found\nIn summary, when you want to set an aesthetic to a constant value, do so in the geom_*() function, otherwise pass an aesthetic to aes() inside the geometry function. Color options can be discovered using colors(). Linetype has fewer options. To make the color more or less transparent, adjust alpha transparency (from 0 = invisible to 1).\n\nggplot(SWIM, aes(x = Year, y = Time)) +\n  geom_point() +\n  geom_line(linetype = \"dashed\",\n            color = \"red\",\n            alpha = .3)"
  },
  {
    "objectID": "modules/09_visualizing_amounts.html",
    "href": "modules/09_visualizing_amounts.html",
    "title": "Visualizing amounts",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#readings",
    "href": "modules/09_visualizing_amounts.html#readings",
    "title": "Visualizing amounts",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from FoDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Directory of visualizations\nWilke (2019). Fundamentals of Data Visualization. Visualizing Amounts"
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#libraries",
    "href": "modules/09_visualizing_amounts.html#libraries",
    "title": "Visualizing amounts",
    "section": "Libraries",
    "text": "Libraries\n\n{here}: 1.0.1: for path management\n{dplyr} 1.1.2: for selecting, filtering, and mutating\n{magrittr} 2.0.3: for code clarity and piping data frame objects\n{ggplot2}: 3.4.3: for creating data visualization"
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#external-functions",
    "href": "modules/09_visualizing_amounts.html#external-functions",
    "title": "Visualizing amounts",
    "section": "External Functions",
    "text": "External Functions\nProvided in class:\nview_html(): for viewing data frames in html format, from /r/my_functions.R\n\nsource(here::here(\"r\", \"my_functions.R\"))"
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#reduce-the-data-frame-to-contain-the-bests",
    "href": "modules/09_visualizing_amounts.html#reduce-the-data-frame-to-contain-the-bests",
    "title": "Visualizing amounts",
    "section": "Reduce the data frame to contain the bests",
    "text": "Reduce the data frame to contain the bests\nWe will group the data by Event and slice() the data so that the data frame contains rows that represent the fastest Time per event. The which.min() function will return the row in an Event that contains the lowest value for the variable, Time.\nWe start with 440 rows.\n\ndim(SWIM)\n\n[1] 440   5\n\n\n\nSWIM %&gt;% \n  group_by(., Event) %&gt;% \n  slice(., which.min(Time)) \n\n# A tibble: 22 × 5\n# Groups:   Event [22]\n     Time Name            Year  Event               Team  \n    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;               &lt;chr&gt; \n 1 2859   Nic Tekieli     2022  100 BACK            Stag  \n 2   61.8 Annie Perizzolo 2010  100 BREAST          Athena\n 3   61.1 Annie Perizzolo 2010  100 BRST-Relay Spl. Athena\n 4 2865   F Applebaum     2022  100 FLY             Stag  \n 5 2821   F Applebaum     2022  100 FLY-Relay Spl.  Stag  \n 6 2646   Alex Poltash    2015  100 FREE            Stag  \n 7 2608   Alex Poltash    2015  100 FREE-Relay Spl. Stag  \n 8  554.  Lucas Lang      2022  1000 FREE           Stag  \n 9  917.  Lucas Lang      2022  1650 FREE           Stag  \n10  105.  Nic Tekieli     2022  200 BACK            Stag  \n# ℹ 12 more rows\n\n\nLet’s assign the new data frame to an object:\n\nFAST_BY_EVENT &lt;- SWIM %&gt;% \n  group_by(., Event) %&gt;% \n  slice(., which.min(Time)) \n\n\nFAST_BY_EVENT %&gt;% glimpse(.)\n\nRows: 22\nColumns: 5\nGroups: Event [22]\n$ Time  &lt;dbl&gt; 2859.00, 61.84, 61.10, 2865.00, 2821.00, 2646.00, 2608.00, 554.1…\n$ Name  &lt;chr&gt; \"Nic Tekieli\", \"Annie Perizzolo\", \"Annie Perizzolo\", \"F Applebau…\n$ Year  &lt;chr&gt; \"2022\", \"2010\", \"2010\", \"2022\", \"2022\", \"2015\", \"2015\", \"2022\", …\n$ Event &lt;chr&gt; \"100 BACK\", \"100 BREAST\", \"100 BRST-Relay Spl.\", \"100 FLY\", \"100…\n$ Team  &lt;chr&gt; \"Stag\", \"Athena\", \"Athena\", \"Stag\", \"Stag\", \"Stag\", \"Stag\", \"Sta…\n\n\nWe now have a data frame containing 22 rows."
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#data-in-tabular-form",
    "href": "modules/09_visualizing_amounts.html#data-in-tabular-form",
    "title": "Visualizing amounts",
    "section": "Data in Tabular Form",
    "text": "Data in Tabular Form\nThere are many ways to present tabular data. {htmlTable} and {knitr} as well as other make this easy. For now, we will pass the data frame to htmlTable::htmlTable().\n\nFAST_BY_EVENT %&gt;% \n  knitr::kable() #%&gt;% \n\n\n\n\nTime\nName\nYear\nEvent\nTeam\n\n\n\n\n2859.00\nNic Tekieli\n2022\n100 BACK\nStag\n\n\n61.84\nAnnie Perizzolo\n2010\n100 BREAST\nAthena\n\n\n61.10\nAnnie Perizzolo\n2010\n100 BRST-Relay Spl.\nAthena\n\n\n2865.00\nF Applebaum\n2022\n100 FLY\nStag\n\n\n2821.00\nF Applebaum\n2022\n100 FLY-Relay Spl.\nStag\n\n\n2646.00\nAlex Poltash\n2015\n100 FREE\nStag\n\n\n2608.00\nAlex Poltash\n2015\n100 FREE-Relay Spl.\nStag\n\n\n554.11\nLucas Lang\n2022\n1000 FREE\nStag\n\n\n917.24\nLucas Lang\n2022\n1650 FREE\nStag\n\n\n105.05\nNic Tekieli\n2022\n200 BACK\nStag\n\n\n119.90\nVincent Pai\n2009\n200 BREAST\nStag\n\n\n103.96\nFrank Applebaum\n2023\n200 FLY\nStag\n\n\n98.35\nMatt Williams\n2017\n200 FREE\nStag\n\n\n97.98\nA Breazeale\n2022\n200 FREE-Relay Spl.\nStag\n\n\n106.97\nGary Simon\n1998\n200 IM\nStag\n\n\n235.61\nHenry Limm\n2018\n400 IM\nStag\n\n\n1352.00\nMatt Williams\n2014\n50 BACK-Relay Leadoff\nStag\n\n\n1510.00\nGary Simon\n1998\n50 BRST-Relay Spl.\nStag\n\n\n1260.00\nMarco Conati\n2022\n50 FLY-Relay Spl.\nStag\n\n\n1221.00\nAlex Poltash\n2015\n50 FREE\nStag\n\n\n1187.00\nNic Tekieli\n2022\n50 FREE-Relay Spl.\nStag\n\n\n265.67\nLucas Lang\n2022\n500 FREE\nStag\n\n\n\n\n  #htmlTable::htmlTable()\n\nSelecting only the Event and the Year:\n\nFAST_BY_EVENT %&gt;% \n  select(., Event, Year) %&gt;% \n  knitr::kable() #%&gt;% \n\n\n\n\nEvent\nYear\n\n\n\n\n100 BACK\n2022\n\n\n100 BREAST\n2010\n\n\n100 BRST-Relay Spl.\n2010\n\n\n100 FLY\n2022\n\n\n100 FLY-Relay Spl.\n2022\n\n\n100 FREE\n2015\n\n\n100 FREE-Relay Spl.\n2015\n\n\n1000 FREE\n2022\n\n\n1650 FREE\n2022\n\n\n200 BACK\n2022\n\n\n200 BREAST\n2009\n\n\n200 FLY\n2023\n\n\n200 FREE\n2017\n\n\n200 FREE-Relay Spl.\n2022\n\n\n200 IM\n1998\n\n\n400 IM\n2018\n\n\n50 BACK-Relay Leadoff\n2014\n\n\n50 BRST-Relay Spl.\n1998\n\n\n50 FLY-Relay Spl.\n2022\n\n\n50 FREE\n2015\n\n\n50 FREE-Relay Spl.\n2022\n\n\n500 FREE\n2022\n\n\n\n\n  #htmlTable::htmlTable()\n\nSelecting only the Event and the Name:\n\nFAST_BY_EVENT %&gt;% \n  select(., Event, Name) %&gt;% \n  knitr::kable() #%&gt;% \n\n\n\n\nEvent\nName\n\n\n\n\n100 BACK\nNic Tekieli\n\n\n100 BREAST\nAnnie Perizzolo\n\n\n100 BRST-Relay Spl.\nAnnie Perizzolo\n\n\n100 FLY\nF Applebaum\n\n\n100 FLY-Relay Spl.\nF Applebaum\n\n\n100 FREE\nAlex Poltash\n\n\n100 FREE-Relay Spl.\nAlex Poltash\n\n\n1000 FREE\nLucas Lang\n\n\n1650 FREE\nLucas Lang\n\n\n200 BACK\nNic Tekieli\n\n\n200 BREAST\nVincent Pai\n\n\n200 FLY\nFrank Applebaum\n\n\n200 FREE\nMatt Williams\n\n\n200 FREE-Relay Spl.\nA Breazeale\n\n\n200 IM\nGary Simon\n\n\n400 IM\nHenry Limm\n\n\n50 BACK-Relay Leadoff\nMatt Williams\n\n\n50 BRST-Relay Spl.\nGary Simon\n\n\n50 FLY-Relay Spl.\nMarco Conati\n\n\n50 FREE\nAlex Poltash\n\n\n50 FREE-Relay Spl.\nNic Tekieli\n\n\n500 FREE\nLucas Lang\n\n\n\n\n  #htmlTable::htmlTable()\n\nThe tables show the best Year and the best athlete per event."
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#bar-charts",
    "href": "modules/09_visualizing_amounts.html#bar-charts",
    "title": "Visualizing amounts",
    "section": "Bar Charts",
    "text": "Bar Charts\nPerhaps a table is not what you want. Perhaps you want to present data as bars. There are two types of bar chart geometry functions: geom_bar() and geom_col(). geom_bar() takes either an x or a y (not both) and produces a plot for which the height of the bar is proportional to the count/frequency of cases in the vector. By contrast, geom_col() takes both an x and a y and plots the height of each x variable bar relative to the value of the y variable. If you want the heights of the bars to represent values in the data (e.g., “identity”), use geom_col().\n\ngeom_bar()\ngeom_bar(\n  mapping = NULL,\n  data = NULL,\n  stat = \"count\",\n  position = \"stack\",\n  ...,\n  just = 0.5,\n  width = NULL,\n  na.rm = FALSE,\n  orientation = NA,\n  show.legend = NA,\n  inherit.aes = TRUE\n)\nTrying out geom_bar(), we need an either an x or a y aesthetic mapping but not both. When passing a variable to x, the bar will be vertical and when passing the variable to y, the bar will be horizontal. Because the mapping is inherited from ggplot() if specified there, you will throw an error like the following because both x and y will be inherited.\nUsing %&gt;%, we will pass the data frame to ggplot():\nSWIM %&gt;%\n  ggplot(., aes(x = Year, y = Time)) +\n  geom_bar()\nError in f(): ! stat_count() can only have an x or y aesthetic.\nWe can change the mapping in the base ggplot() layer, which will plot bars corresponding to the unique levels of the variable passed to x at a height relative to the frequency of occurrence of those unique levels.\nChecking ?geom_bar, you will notice that geom_bar() has a default stat = \"count\". This means that the default bar plot will plot the “count”, or frequency, of elements in a vector variable. When the count or frequency of a value is 1, the bar height will be 1 on the y axis and if an element appears 5 times in the vector, the bar height will be 5. For a horizontal bar, the bar length, rather than height, will be 5. Looking at FAST_BY_EVENT$Team, you will see many instances that will be “Stag” or “Athena”. Based on the previous discussion, what might you expect the bar to look like? Answer before seeing the plot or explain why after seeing the plot.\nLet’s pass a variable to x:\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Year)) +\n  geom_bar()\n\n\n\n\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Team)) +\n  geom_bar()\n\n\n\n\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Event)) +\n  geom_bar()\n\n\n\n\nMessy. I am not sure that’s what we want but you get a feel for what geom_bar() is doing.\nLet’s pass a variable to y:\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(y = Team)) +\n  geom_bar()\n\n\n\n\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Year)) +\n  geom_bar()\n\n\n\n\nIf geom_bar() does inherit x and y from ggplot(), and if you want the heights of the bars to represent values in the data (e.g., “identity”), use geom_bar() and pass stat = \"identity\"). You should see the same plot as shown with passing only x = Year except for the inclusion of Team information.\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Year, y = Team)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\nThis plot is ugly. We will work on fixing this later but or now understand that geom_bar() and geom_col() differ but can be used to do plot same thing.\n\n\ngeom_col()\nRemember that geom_col() takes both an x and a y and plots the height of each x variable bar relative to the value of the y variable.\ngeom_col(\n  mapping = NULL,\n  data = NULL,\n  position = \"stack\",\n  ...,\n  just = 0.5,\n  width = NULL,\n  na.rm = FALSE,\n  show.legend = NA,\n  inherit.aes = TRUE\n)\nBeing verbose:\n\nFAST_BY_EVENT %&gt;%\n  ggplot(data = ., \n         mapping = aes(x = Name, y = Time)\n  ) +\n  geom_col()\n\n\n\n\nTrimming some code:\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Name, y = Time)\n  ) +\n  geom_col()\n\n\n\n\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Year, y = Team)) +\n  geom_col()\n\n\n\n\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(Year, Time)) +\n  geom_col()\n\n\n\n\nSwitching x and y:\n\nFAST_BY_EVENT %&gt;%\n  ggplot(., aes(x = Team, y = Year)) +\n  geom_col()\n\n\n\n\nYuck."
  },
  {
    "objectID": "modules/09_visualizing_amounts.html#adding-layers",
    "href": "modules/09_visualizing_amounts.html#adding-layers",
    "title": "Visualizing amounts",
    "section": "Adding Layers",
    "text": "Adding Layers\nWe can take a plot object and add layers that will override defaults. Let’s assign the plot to an object to make adding some layers easier, though not necessary.\n\nfast_by_event_col &lt;- FAST_BY_EVENT %&gt;%\n  ggplot(data = ., \n         mapping = aes(x = Name, y = Time)\n  ) +\n  geom_col()\n\nAdd a coord_*() layer, specifically coord_flip() to flip the coordinates. Take object, and add layer using +:\n\nfast_by_event_col +\n  coord_flip()\n\n\n\n\nAdd a theme() layer:\n\nfast_by_event_col +\n  coord_flip() +\n  theme_minimal() \n\n\n\n\nAdd label layers:\n\nfast_by_event_col +\n  coord_flip() +\n  theme_minimal() +\n  xlab(\" \") +\n  ylab(\"Seconds\")"
  },
  {
    "objectID": "modules/10_visualizing_associations.html",
    "href": "modules/10_visualizing_associations.html",
    "title": "Visualizing associations",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/10_visualizing_associations.html#readings",
    "href": "modules/10_visualizing_associations.html#readings",
    "title": "Visualizing associations",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Visualizing associations"
  },
  {
    "objectID": "modules/11_spatial_position_and_adjustment.html",
    "href": "modules/11_spatial_position_and_adjustment.html",
    "title": "Spatial position and adjustment",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/11_spatial_position_and_adjustment.html#readings",
    "href": "modules/11_spatial_position_and_adjustment.html#readings",
    "title": "Spatial position and adjustment",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Overlapping points\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Overplotting"
  },
  {
    "objectID": "modules/12_considerations_in_data_visualization.html",
    "href": "modules/12_considerations_in_data_visualization.html",
    "title": "Considerations in data visualization",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/12_considerations_in_data_visualization.html#readings",
    "href": "modules/12_considerations_in_data_visualization.html#readings",
    "title": "Considerations in data visualization",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. The principle of proportional ink\nWilke (2019). Fundamentals of Data Visualization. Common pitfalls of color use\nWilke (2019). Fundamentals of Data Visualization. Telling a story"
  },
  {
    "objectID": "modules/13_color_scales_and_palettes.html",
    "href": "modules/13_color_scales_and_palettes.html",
    "title": "Color scales and palettes",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/13_color_scales_and_palettes.html#readings",
    "href": "modules/13_color_scales_and_palettes.html#readings",
    "title": "Color scales and palettes",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Color basics\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Color scales"
  },
  {
    "objectID": "modules/14_histograms_and_density_plots.html",
    "href": "modules/14_histograms_and_density_plots.html",
    "title": "Histograms and density plots",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/14_histograms_and_density_plots.html#readings",
    "href": "modules/14_histograms_and_density_plots.html#readings",
    "title": "Histograms and density plots",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Visualizing distributions: Histograms and density plots"
  },
  {
    "objectID": "modules/15_coordinates_axes_and_position_scales.html",
    "href": "modules/15_coordinates_axes_and_position_scales.html",
    "title": "Coordinates, axes, and position scales",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/15_coordinates_axes_and_position_scales.html#readings",
    "href": "modules/15_coordinates_axes_and_position_scales.html#readings",
    "title": "Coordinates, axes, and position scales",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\nhttps://clauswilke.com/dataviz/coordinate-systems-axes.html"
  },
  {
    "objectID": "modules/16_statistical_transformations.html",
    "href": "modules/16_statistical_transformations.html",
    "title": "Statistical transformations",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/16_statistical_transformations.html#readings",
    "href": "modules/16_statistical_transformations.html#readings",
    "title": "Statistical transformations",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Weighting data\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Stats"
  },
  {
    "objectID": "modules/17_visualizing_more_distributions.html",
    "href": "modules/17_visualizing_more_distributions.html",
    "title": "Visualizing more distributions",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/17_visualizing_more_distributions.html#readings",
    "href": "modules/17_visualizing_more_distributions.html#readings",
    "title": "Visualizing more distributions",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Visualizing distributions: Visualizing many distributions at once"
  },
  {
    "objectID": "modules/18_visualizing_uncertainty.html",
    "href": "modules/18_visualizing_uncertainty.html",
    "title": "Visualizing uncertainty",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/18_visualizing_uncertainty.html#readings",
    "href": "modules/18_visualizing_uncertainty.html#readings",
    "title": "Visualizing uncertainty",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Visualizing uncertainty\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Uncertainty"
  },
  {
    "objectID": "modules/19_visualizing_trends.html",
    "href": "modules/19_visualizing_trends.html",
    "title": "Visualizing trends",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/19_visualizing_trends.html#readings",
    "href": "modules/19_visualizing_trends.html#readings",
    "title": "Visualizing trends",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Visualizing Trends\n\nOptional:\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Time series"
  },
  {
    "objectID": "modules/20_legends_and_arrangement.html",
    "href": "modules/20_legends_and_arrangement.html",
    "title": "Legends and arrangement",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/20_legends_and_arrangement.html#readings",
    "href": "modules/20_legends_and_arrangement.html#readings",
    "title": "Legends and arrangement",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Redundant coding"
  },
  {
    "objectID": "modules/21_designing_perceptually_efficient_visualizations.html",
    "href": "modules/21_designing_perceptually_efficient_visualizations.html",
    "title": "Designing perceptually-efficient visualizations",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/21_designing_perceptually_efficient_visualizations.html#readings",
    "href": "modules/21_designing_perceptually_efficient_visualizations.html#readings",
    "title": "Designing perceptually-efficient visualizations",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nFranceroni et al. (2012). The Science of Visual Data Communication: What Works.\nXiong et a. (2023). Seeing What You Believe or Believing What You See? Belief Biases Correlation Estimation.\n\nOptional (for the intellectually curious): - Szafir et al. (2016). Four types of ensemble coding in data visualizations. - Xiong et al. (2021). Visual Arrangements of Bar Charts Influence Comparisons in Viewer Takeaways."
  },
  {
    "objectID": "modules/22_annotation_and_text.html",
    "href": "modules/22_annotation_and_text.html",
    "title": "Annotation and text",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/22_annotation_and_text.html#readings",
    "href": "modules/22_annotation_and_text.html#readings",
    "title": "Annotation and text",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Annotations"
  },
  {
    "objectID": "modules/23_multi_panel_plots_faceting.html",
    "href": "modules/23_multi_panel_plots_faceting.html",
    "title": "Multi-panel plots: Faceting",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/23_multi_panel_plots_faceting.html#readings",
    "href": "modules/23_multi_panel_plots_faceting.html#readings",
    "title": "Multi-panel plots: Faceting",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Multi-panel figures\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Faceting"
  },
  {
    "objectID": "modules/24_attentional_control.html",
    "href": "modules/24_attentional_control.html",
    "title": "Attentional control",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/24_attentional_control.html#readings",
    "href": "modules/24_attentional_control.html#readings",
    "title": "Attentional control",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Balance the data and the context\nWilke (2019). Fundamentals of Data Visualization. Use larger axis labels\nAjani et al. (2022). Declutter and Focus: Empirically Evaluating Design Guidelines for Effective Data Communication"
  },
  {
    "objectID": "modules/25_titles_captions_and_tables.html",
    "href": "modules/25_titles_captions_and_tables.html",
    "title": "Title, Captions, and Tables",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/25_titles_captions_and_tables.html#readings",
    "href": "modules/25_titles_captions_and_tables.html#readings",
    "title": "Title, Captions, and Tables",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWilke (2019). Fundamentals of Data Visualization. Titles, captions, and tables"
  },
  {
    "objectID": "modules/26_themes.html",
    "href": "modules/26_themes.html",
    "title": "Figure Design & Themes",
    "section": "",
    "text": "Under construction.\n\n\n\nThis page is a work in progress and may contain areas that need more detail or that required syntactical, grammatical, and typographical changes. If you find some part requiring some editing, please let me know so I can fix it for you."
  },
  {
    "objectID": "modules/26_themes.html#readings",
    "href": "modules/26_themes.html#readings",
    "title": "Figure Design & Themes",
    "section": "Readings",
    "text": "Readings\nReading should take place in two parts:\n\nPrior to class, the goal should be to familiarize yourself and bring questions to class. The readings from TFDV are conceptual and should facilitate readings from EGDA for code implementation.\nAfter class, the goal of reading should be to understand and implement code functions as well as support your understanding and help your troubleshooting of problems.\n\nBefore Class: First, read to familiarize yourself with the concepts rather than master them. Understand why one would want to visualize data in a particular way and also understand some of the functionality of {ggplot2}. I will assume that you attend class with some level of basic understanding of concepts.\nClass: In class, some functions and concepts will be introduced and we will practice implementing {ggplot2} code. On occasion, there will be an assessment involving code identification, correction, explanation, etc. of concepts addressed in previous modules and perhaps some conceptual elements from this week’s readings.\nAfter Class: After having some hands-on experience with coding in class, homework assignments will involve writing your own code to address some problem. These problems will be more complex, will involving problem solving, and may be open ended. This is where the second pass at reading with come in for you to reference when writing your code. The module content presented below is designed to offer you some assistance working through various coding problems but may not always suffice as a replacement for the readings from Wickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e).\n\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Themes(https://ggplot2-book.org/themes)\nWickham, Navarro, & Pedersen (under revision). ggplot2: Elegant Graphics for Data Analysis (3e). Extensions(https://ggplot2-book.org/extensions)"
  },
  {
    "objectID": "modules/99_importing_many_files_into_a_single_data_frame.html",
    "href": "modules/99_importing_many_files_into_a_single_data_frame.html",
    "title": "Importing many files into a single data frame",
    "section": "",
    "text": "{here}: 1.0.1: for path management\n{dplyr} 1.1.2: for selecting, filtering, and mutating\n{magrittr} 2.0.3: for code clarity and piping data frame objects\n{vroom}: 1.6.3: for reading many files\n\n\nlibrary(magrittr)"
  },
  {
    "objectID": "modules/99_importing_many_files_into_a_single_data_frame.html#libraries",
    "href": "modules/99_importing_many_files_into_a_single_data_frame.html#libraries",
    "title": "Importing many files into a single data frame",
    "section": "",
    "text": "{here}: 1.0.1: for path management\n{dplyr} 1.1.2: for selecting, filtering, and mutating\n{magrittr} 2.0.3: for code clarity and piping data frame objects\n{vroom}: 1.6.3: for reading many files\n\n\nlibrary(magrittr)"
  },
  {
    "objectID": "modules/99_importing_many_files_into_a_single_data_frame.html#get-the-file-names-by-pattern",
    "href": "modules/99_importing_many_files_into_a_single_data_frame.html#get-the-file-names-by-pattern",
    "title": "Importing many files into a single data frame",
    "section": "Get the File Names by Pattern",
    "text": "Get the File Names by Pattern\nLooking at the pattern of file names for field events, you see .csv file names containing patterns like “DT”, “HT”, “JT”, “LJ”, “PV”, “LJ”, “SP”, and “TJ”. Double check that you have all event name types. I would also recommend keeping events measured on a time scale separate from a distance scale.\nI will demonstrate the process with two field events. You can apply the logic for all events. We will use vroom::vroom() to take the file names (full names mind you), open them all up and combine them into a single data frame.\nLet’s start with field events like discus:\nWe will use some regular expressions, or regex, to help us. Because the data are named by year, we can limit the search to files that contain a 4-digit year \\\\d{4} so that you don’t also match any aggregated uber files that do not contain a year. Then, the dot star .* will help with filler patterns. In particular, . refers to any character (e.g,. digit, alpha character, or any other special character) and * means zero or more times, so this pattern will search for all files that start with 4 digits followed by anything in the name. Then, the _HT.csv pattern will restrict the search to files containing that exact character string. All together, you have a search for pattern = \"\\\\d{4}.*_DT.csv\". This will not return the file without the year.\n\nDT &lt;- list.files(here::here(\"data\", \"tfrrs\"), \n           pattern = \"\\\\d{4}.*_DT.csv\",\n           ignore.case = T,\n           full.names = T\n           ) %&gt;% \n  vroom::vroom(.)\n\nRows: 1743 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Athlete, Year, Mark, Conv, Meet, Meet_Date, Team, Event, Location\ndbl (1): Season\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreadr::write_csv(DT, here::here(\"data\", \"tfrrs\", \"DT.csv\"))\n\nRegistered S3 methods overwritten by 'readr':\n  method                    from \n  as.data.frame.spec_tbl_df vroom\n  as_tibble.spec_tbl_df     vroom\n  format.col_spec           vroom\n  print.col_spec            vroom\n  print.collector           vroom\n  print.date_names          vroom\n  print.locale              vroom\n  str.col_spec              vroom\n\n\nNow how about hammer:\n\nHT &lt;- list.files(here::here(\"data\", \"tfrrs\"), \n           pattern = \"\\\\d{4}.*_HT.csv\",\n           full.names = T\n           ) %&gt;% \n  vroom::vroom(.)\n\nRows: 1557 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Athlete, Year, Mark, Conv, Meet, Meet_Date, Team, Event, Location\ndbl (1): Season\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreadr::write_csv(HT, here::here(\"data\", \"tfrrs\", \"HT.csv\"))"
  },
  {
    "objectID": "modules/99_importing_many_files_into_a_single_data_frame.html#get-the-event-files-and-combine",
    "href": "modules/99_importing_many_files_into_a_single_data_frame.html#get-the-event-files-and-combine",
    "title": "Importing many files into a single data frame",
    "section": "Get the Event Files and Combine",
    "text": "Get the Event Files and Combine\nFor some events, the columns may differ, so you might get an error. If you review the names of columns and locate the pesky file(s), you can remove any columns from the data, like the \"Wind\" column, or others you don’t want.\nAfter aggregating by event, you can combine the events, for example, combine the field events into a single data frame. Just make sure that you have a vector of names (e.g., c()) that you pass into the here() call because remember, those file names should be saved in the /data/tfrrs/ path specified in here().\n\nFIELD &lt;- vroom::vroom(here::here(\"data\", \"tfrrs\", c(\"DT.csv\", \"HT.csv\")))\n\nRows: 3300 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): Athlete, Year, Mark, Conv, Meet, Meet_Date, Team, Event, Location\ndbl (1): Season\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAlternatively, if you have the data frame objects still in memory, pass the data frames to dplyr::bind_rows() which will add the rows of the second data frame below the first data frame and then\n\nFIELD &lt;- dplyr::bind_rows(DT, HT, DT, HT)"
  },
  {
    "objectID": "modules/99_importing_many_files_into_a_single_data_frame.html#save-data",
    "href": "modules/99_importing_many_files_into_a_single_data_frame.html#save-data",
    "title": "Importing many files into a single data frame",
    "section": "Save Data",
    "text": "Save Data\nAnd then combine and write to an uber field event .csv.\n\nreadr::write_csv(FIELD, here::here(\"data\", \"tfrrs\", \"TFRRS_FIELD.csv\"))"
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Modules",
    "section": "",
    "text": "This course consists of various content modules that introduce students to data visualization techniques using R. Techniques, however, should not be applied haphazardly but instead with respect to the biological and cognitive limitations of the user. The general principles of data visualization taught can be applied to programming languages other than R (e.g., Python, D3, etc.)."
  },
  {
    "objectID": "modules/index.html#module-structure",
    "href": "modules/index.html#module-structure",
    "title": "Modules",
    "section": "Module structure",
    "text": "Module structure\nIn general, modules will contain readings, additional resources, and weekly assignments.\nThe modules will be updated across the semester as needed. There are more modules on this course site because some modules provide other useful information. The names of the modules listed in the syllabus, however, do match the names in the module listing."
  },
  {
    "objectID": "project/project.html",
    "href": "project/project.html",
    "title": "Project",
    "section": "",
    "text": "For the data visualization project, your team will writ code in order to analyze data and create data visualizations in order to communicate a story that would address the client’s interest in determining whether COVID has influenced athlete performance. Given the constraints of data to inform this specific question, the project will involve data exploration to tell a story about athlete performance. Given the client has little information about athlete performance, including data visualizations, this exploration allows for a healthy dose of flexibility in team creativity. This open element will also allow teams to develop ideas independently, thereby producing stories that will likely diverge wildly from each other, making the project an exciting foray into data storytelling for many students.\n\n\nProject roles help streamline events, assist delegation, allow for some accountability, and reduce workload overlap. Project roles are designed to help keep the project organized and reduce confusion about what project elements team members are taking on. Team roles should be decided upon in a way that maximizes member ability so that task demands are equal across team members. These roles provide some guidelines but do not obviate members from contributing to and participating in other tasks subsumed under specific roles. In other words, when the Project Manager falls ill, another team member should step up to facilitate any necessary communication between the liaison of me. Likewise, the Coding Lead would step in to help the Writing Lead revise writing when necessary. Similarly, the Writing Lead or Project Manager should help the Coding Lead with organizing code when appropriate. All team members have have the same goal, which is to develop, code, and communicate the project to the liaison. All members will code, organize, and write and may take lead on sections with which they are most familiar or most qualified in addressing.\nIf the team decides to create roles different from those suggested below, please just let me know.\nSuggested Roles:\n\n\n\nCommunicating with course faculty and liaison(s);\nScheduling and reminding the team meetings and meetings with liaison;\nAssigning tasks to team members (with help from course professor is needed) and based on the project requirements;\nMonitoring and keeping track of each member’s project progress;\nMotivating the team members on their task completion and future goals;\nDealing with any conflicts within the team and updating any concerns with course professor;\nCoordinating team activities such as presentation dry runs;\nHelping maintain equity of tasks across all team members, inclusion the PM;\nThe Project Manager is not responsible to reminding team members to complete their tasks or complete worklogs.\n\n\n\n\n\n1 or 2 members\nPlanning, guiding, and leading report writing;\nDoing background/external research on topic as relevant;\nAssigning sections/chapters of documents to appropriate members;\nKeeping track of the written progress;\nHelping develop a data visualization story line;\nFormatting, text, images, inline code (R code embedded in text), and tables on final document (RMarkdown for final report);\nProofreading/editing deliverable documents like slide presentation, written report, etc.;\nThe Reporting Team is not responsible to all writing.\n\n\n\n\n\n1 or 2 members\nCreating and maintaining organization of the project code (e.g., directories, sourced scripts, etc.)\nLeading coding and code documenting;\nAssigning technical tasks to other team members;\nKeeping track of the progress of the technical tasks;\nHelping other team members troubleshoot code (see also TA and course professor);\nCommunicating with PM, liaison (during liaison meetings), and course professor regarding any technical needs and concerns;\nCommunicating with RL regarding messaging of coded results;\nMaintaining GitHub repo (recommended, please see course professor for assistance);\nThe Coding Team is not responsible for all coding.\n\nBased on abilities and interests of team members, the team should determine how many individuals to assign to a given role, or determine other appropriate roles given the abilities of the team members. There should be unanimity in these decisions. I will not assign you to roles."
  },
  {
    "objectID": "project/project.html#project-description",
    "href": "project/project.html#project-description",
    "title": "Project",
    "section": "",
    "text": "For the data visualization project, your team will writ code in order to analyze data and create data visualizations in order to communicate a story that would address the client’s interest in determining whether COVID has influenced athlete performance. Given the constraints of data to inform this specific question, the project will involve data exploration to tell a story about athlete performance. Given the client has little information about athlete performance, including data visualizations, this exploration allows for a healthy dose of flexibility in team creativity. This open element will also allow teams to develop ideas independently, thereby producing stories that will likely diverge wildly from each other, making the project an exciting foray into data storytelling for many students.\n\n\nProject roles help streamline events, assist delegation, allow for some accountability, and reduce workload overlap. Project roles are designed to help keep the project organized and reduce confusion about what project elements team members are taking on. Team roles should be decided upon in a way that maximizes member ability so that task demands are equal across team members. These roles provide some guidelines but do not obviate members from contributing to and participating in other tasks subsumed under specific roles. In other words, when the Project Manager falls ill, another team member should step up to facilitate any necessary communication between the liaison of me. Likewise, the Coding Lead would step in to help the Writing Lead revise writing when necessary. Similarly, the Writing Lead or Project Manager should help the Coding Lead with organizing code when appropriate. All team members have have the same goal, which is to develop, code, and communicate the project to the liaison. All members will code, organize, and write and may take lead on sections with which they are most familiar or most qualified in addressing.\nIf the team decides to create roles different from those suggested below, please just let me know.\nSuggested Roles:\n\n\n\nCommunicating with course faculty and liaison(s);\nScheduling and reminding the team meetings and meetings with liaison;\nAssigning tasks to team members (with help from course professor is needed) and based on the project requirements;\nMonitoring and keeping track of each member’s project progress;\nMotivating the team members on their task completion and future goals;\nDealing with any conflicts within the team and updating any concerns with course professor;\nCoordinating team activities such as presentation dry runs;\nHelping maintain equity of tasks across all team members, inclusion the PM;\nThe Project Manager is not responsible to reminding team members to complete their tasks or complete worklogs.\n\n\n\n\n\n1 or 2 members\nPlanning, guiding, and leading report writing;\nDoing background/external research on topic as relevant;\nAssigning sections/chapters of documents to appropriate members;\nKeeping track of the written progress;\nHelping develop a data visualization story line;\nFormatting, text, images, inline code (R code embedded in text), and tables on final document (RMarkdown for final report);\nProofreading/editing deliverable documents like slide presentation, written report, etc.;\nThe Reporting Team is not responsible to all writing.\n\n\n\n\n\n1 or 2 members\nCreating and maintaining organization of the project code (e.g., directories, sourced scripts, etc.)\nLeading coding and code documenting;\nAssigning technical tasks to other team members;\nKeeping track of the progress of the technical tasks;\nHelping other team members troubleshoot code (see also TA and course professor);\nCommunicating with PM, liaison (during liaison meetings), and course professor regarding any technical needs and concerns;\nCommunicating with RL regarding messaging of coded results;\nMaintaining GitHub repo (recommended, please see course professor for assistance);\nThe Coding Team is not responsible for all coding.\n\nBased on abilities and interests of team members, the team should determine how many individuals to assign to a given role, or determine other appropriate roles given the abilities of the team members. There should be unanimity in these decisions. I will not assign you to roles."
  },
  {
    "objectID": "project/project.html#project-grading",
    "href": "project/project.html#project-grading",
    "title": "Project",
    "section": "Project Grading",
    "text": "Project Grading\n\nQuality of project deliverable documents (e.g., organization, coherence, story, coding clarity/organiation, plots, etc.)\nProfessionalism (e.g., liaison meeting etiquette and responsibility, timely discord communication, non-tardy attendance at weekly team meeting, weekly worklogs, feedback from liaison, etc.)\nPeer evaluation (e.g., contributions, team player, etc.)\n\nNote: Liaison’s will also participate in evaluating all teams. The team with the most impressive project (e.g., most clear, most useful and actionable, most interesting, most thought provoking, etc.) will receive bonus points."
  },
  {
    "objectID": "project/project.html#presentation",
    "href": "project/project.html#presentation",
    "title": "Project",
    "section": "Presentation",
    "text": "Presentation\n\nPresentation Characteristics\n\nClarity: well-explained; easy to follow/understand; ability to communicate points effectively\nOrganization: structured logically; ability to walk audience through the data journey and communicate a story interpretation about data\nThoroughness: all relevant issues discussed thoroughly\nPresentation Style: degree of preparedness and polish in presentation; smooth and rehearsed; minimum of reading; well-paced; slide quality\n\n\n\nPresentation Tips\n\nSpeak to your audience. Look them in the eyes, tell them about the journey. In other words, don’t just read from your slides.\nDo not overwhelm your audience with too much information, especially verbal information. Doing so causes people to read your slides or look at slide content you are not talking about at the moment. You are the presenter and your slides are your visual aides used to support what you communicate. Elaboration can occur in the written deliverable.\n\nPresent slides topically; do not mix unrelated content; use relevant headers, etc.\nPresent summary points on slides rather than full sentences. Communicate to your audience in sentences but don’t present complete sentences on slides unless imperative for communicating a specific point.\nPresent each point separately; do not present all slide content at once (e.g., points a, b, c); communicate specific points (e.g., a) to your audience. Presenting all points at once prevents your audience from paying attention to you and causes cognitive interference/distraction.\nUse a tool (e.g., pointer, etc.) to direct attention to necessary elements of slides, especially when a slide contains multiple pieces of information. Doing so will reduce unnecessary confusion from some audience members because they will not be looking at the incorrect content.\n\nIntroduce team members, their role, etc. when “passing the the mic”. Your client should be reminded of who the team member is and what their role was."
  },
  {
    "objectID": "project/project.html#weekly-worklogreport",
    "href": "project/project.html#weekly-worklogreport",
    "title": "Project",
    "section": "Weekly Worklog/Report",
    "text": "Weekly Worklog/Report\nTracking individual and team goals weekly ensures progress toward the goal, commitment to the project, accountability for oneself, and a record of accomplishments.\nThe Project Manager should inquire with the team about the best way to submit worklogs or transparency and review. This could be a Google Doc File, a spreadsheet, or even a Google From that contains questions to answer, which then get dumped into a Google Spreadsheet for all to review.\n\nFrequency of Worklog\nWorklogs are to be completed by end-of-day following the team meeting, after communicating future goals (distributed equally) to other team members. Please make public for me to review. Meetings should be physical to facilitate team cohesion and conversation, and limit silly technical issues that just waste meeting time.\n\n\nContents of Worklog\nWorklogs should contain information about the reporting date, the team member reporting, that member’s previous week accomplishments, and that member’s future week goals\n\nFor the past week, I accomplished the following specific goals for my team:\n\n\nThis…\nThat…\nAnd the other…\n\n\nFor this past week, the number of hours allocated toward those goals was: ___\nFor this coming week, my specific goals for the team include:\n\n\nThis…\nThat…\nAnd the other…\n\n\nIf relevant, any items to discuss with liaison."
  },
  {
    "objectID": "resources/dataviz_readings.html",
    "href": "resources/dataviz_readings.html",
    "title": "Readings",
    "section": "",
    "text": "You should read the enumerated items (those prefaced by numbers); others can supplemental.\n\nTopic\n\nxxx\nxxx\n\n\n\nGuided Practice with Posit Primers\n\nBar Plots\nBox Plots\nScatterplots\nLine Plots\n\n\n\nTopic\n\nxxx\nxxx\n\n\n\nThe Grammar of Graphics using ggplot\n\nxxx\n\n\n\nMapping Data to Visual Elements\n\nMapping Data to Aesthetics\nMake a Plot\n\ni) xxx\n\n\nAesthetic Considerations Designing Perceptually Efficient Visualizations\n\n\nSpatial Position and Adjustment (CH 7)\n\nAddressing Overplotting with geom_jitter()\n\n\n\n\nStatistical Transformations: Data as-is Versus Summaries\n\n\nData Preparation using dplyr\n\nSelecting Rows and Columns: select() and filter()\n1.2. Grouping/Pooling Data: `group_by()`\n\nData aggregation: summarize()\n\n\n\n\nScales and Axes (CH 6)\n\n\nVisualizing Comparisons\n\nxxx\nxxx\n\n\n\nVisualizing Uncertainty\n\nHistograms/Density Plots\nxxx\n\n\n\nVisualizing Associations and Trends\n\nScatterplots Using group_by for subgroups\nLine Plots\n\nVisualizing Amounts Visualizing Proportions or Ratios\nhttps://clauswilke.com/dataviz/visualizing-amounts.html\n\n\nMaking Visualizations Better\n\nPrinciple of Proportional Ink\nColor Pitfalls\nStorytelling\nWhy People Make Bad Charts (and What to Do When it Happens)\nRefining Plots\n\n\n\nAnnotation\n\nClaus Wilke, Claus Wilke, *Fundamentals of Data Visualization\n\nredundant-coding.html\nSmall Multiples\nTitle and Captions\nAxis Labesls\n\n\n\n\nEmphasis\n\nCalling Attention to Points\nAnnotating Points\nHighlighting Sections\n\n\n\nImage Formats\n\njpg, png, or svg?\nFile Formats Explained\n\n\nWhats the difference between jpg png and gif\nKieran Healy, Data Visualization\n\nxx\n\n\n[Cara Thompson, “Level Up Your Labels: Tips and Tricks for Annotating Plots”] (https://www.cararthompson.com/talks/user2022)\n\n\nReproduce vs. Replicate\n\nWhat is the reprex library?\nReproducible example with reprex\n\n\n\n\n\nAnimation\n\n\n\n\nflowchart RL\n  B(Data) --&gt; A(Plot) \n  C(Geometry) --&gt; A(Plot) \n  D(Statistics) --&gt; A(Plot)\n  E(Coordinate System) --&gt; A(Plot)\n  F(Theme) --&gt; A(Plot)"
  },
  {
    "objectID": "resources/dataviz_tools.html#websites",
    "href": "resources/dataviz_tools.html#websites",
    "title": "Tools for Data Visualization",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/\n\n\n\nColor Codes\n\nHTML colors: https://htmlcolorcodes.com/\n\n\n\nVisualize a palette for different types of colorblindness\n\nViz Palette https://projects.susielu.com/viz-palette\n\n\n\nWhat do your photos/images look like to others?\n\nCoblis colorblindness imulator: https://www.color-blindness.com/coblis-color-blindness-simulator/\nPilestone Colorblindness Simulator: https://pilestone.com/pages/color-blindness-simulator-1\nVischeck http://www.vischeck.com/vischeck/vischeckImage.php"
  },
  {
    "objectID": "resources/dataviz_tools.html#books",
    "href": "resources/dataviz_tools.html#books",
    "title": "Tools for Data Visualization",
    "section": "Books",
    "text": "Books\n\nClaus Wilke, Fundamentals of Data Visualization https://clauswilke.com/dataviz/\nhttps://www.bigbookofr.com/data-visualization.html\nhttps://handsondataviz.org/"
  },
  {
    "objectID": "resources/dataviztools.html#websites",
    "href": "resources/dataviztools.html#websites",
    "title": "Tools for Data Visualization",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/\n\n\n\nColor Codes\n\nHTML colors: https://htmlcolorcodes.com/\n\n\n\nVisualize a palette for different types of colorblindness\n\nViz Palette https://projects.susielu.com/viz-palette\n\n\n\nWhat do your photos/images look like to others?\n\nCoblis colorblindness imulator: https://www.color-blindness.com/coblis-color-blindness-simulator/\nPilestone Colorblindness Simulator: https://pilestone.com/pages/color-blindness-simulator-1\nVischeck http://www.vischeck.com/vischeck/vischeckImage.php"
  },
  {
    "objectID": "resources/dataviztools.html#books",
    "href": "resources/dataviztools.html#books",
    "title": "Tools for Data Visualization",
    "section": "Books",
    "text": "Books\n\nClaus Wilke, Fundamentals of Data Visualization https://clauswilke.com/dataviz/\nhttps://www.bigbookofr.com/data-visualization.html\nhttps://handsondataviz.org/"
  },
  {
    "objectID": "slides/0x-title_edit.html",
    "href": "slides/0x-title_edit.html",
    "title": "rmatch(slide_name, slide_order)` . How R and RStudio Work",
    "section": "",
    "text": "#source(here::here(\"R\", \"_common.R\"))\n# from source\nslide_order &lt;- c(\"02-content.qmd\", \"01-content.qmd\")\n\nslide_name &lt;- basename(this.path::this.path())\nslide_name &lt;- \"02-content.qmd\"\n\ntesting"
  },
  {
    "objectID": "slides/bar_plots.html#fragments",
    "href": "slides/bar_plots.html#fragments",
    "title": "Data Visualizations using ggplot",
    "section": "Fragments",
    "text": "Fragments\n\nFade in\n\n\nFade out\n\n\nHighlight red\n\n\nFade in, then out"
  },
  {
    "objectID": "slides/bar_plots.html#fragments-nesting",
    "href": "slides/bar_plots.html#fragments-nesting",
    "title": "Data Visualizations using ggplot",
    "section": "Fragments, nesting",
    "text": "Fragments, nesting\n\n\n\nFade in &gt; Turn red &gt; Semi fade out"
  },
  {
    "objectID": "slides/bar_plots.html#fragments-spans",
    "href": "slides/bar_plots.html#fragments-spans",
    "title": "Data Visualizations using ggplot",
    "section": "Fragments, spans",
    "text": "Fragments, spans\n\nHighlight this important part.\nFade in that."
  },
  {
    "objectID": "slides/bar_plots.html#plot-elements",
    "href": "slides/bar_plots.html#plot-elements",
    "title": "Data Visualizations using ggplot",
    "section": "Plot Elements",
    "text": "Plot Elements\n\n\na geometric object, geom_*()\na statistic, stat_*()\na coordinate system, coord_*()\na theme, coord_*()\na facet, facet_*()\nlabels, labs(), lable_*()\na facet legend or guide, guide_*()\na scale, scale_*()\nannotations, annotation_*()"
  },
  {
    "objectID": "slides/bar_plots.html#example-geoms-e.g.-geom_",
    "href": "slides/bar_plots.html#example-geoms-e.g.-geom_",
    "title": "Data Visualizations using ggplot",
    "section": "Example Geoms (e.g., geom_*)",
    "text": "Example Geoms (e.g., geom_*)\n\n\ngeom_histogram() & geom_density()\ngeom_bar()\ngeom_col()\ngeom_line()\ngeom_boxplot()\ngeom_point() for scatteplots\nStatistic"
  },
  {
    "objectID": "slides/bar_plots.html#load-the-library",
    "href": "slides/bar_plots.html#load-the-library",
    "title": "Data Visualizations using ggplot",
    "section": "Load the library",
    "text": "Load the library\nlibrary(ggplot)"
  },
  {
    "objectID": "slides/bar_plots.html#create-the-plot-object",
    "href": "slides/bar_plots.html#create-the-plot-object",
    "title": "Data Visualizations using ggplot",
    "section": "Create the plot object",
    "text": "Create the plot object\n#"
  },
  {
    "objectID": "slides/bar_plots.html#add-layers",
    "href": "slides/bar_plots.html#add-layers",
    "title": "Data Visualizations using ggplot",
    "section": "Add layers",
    "text": "Add layers\nlibrary(ggplot)"
  },
  {
    "objectID": "slides/bar_plots.html#bar-plots-with-geom_bar",
    "href": "slides/bar_plots.html#bar-plots-with-geom_bar",
    "title": "Data Visualizations using ggplot",
    "section": "Bar plots with geom_bar()",
    "text": "Bar plots with geom_bar()\n\nare this\nare that"
  },
  {
    "objectID": "slides/bar_plots.html#facet_wrap-and-facet_grid",
    "href": "slides/bar_plots.html#facet_wrap-and-facet_grid",
    "title": "Data Visualizations using ggplot",
    "section": "facet_wrap() and facet_grid()",
    "text": "facet_wrap() and facet_grid()\n\nidentify the grouping variable(s)\nfacet_wrap() for a single grouping by row or col\n\nfacet_wrap(facets = ~my_grouping_variable)\n\nfacet_grid() for two groupsing vars, row and col\n\nfacet_grid(facets = my_grouping_variableA ~ my_grouping_variableB)\n\n\nNote: The ~ does not precede the first grouping var in facet_grid()."
  },
  {
    "objectID": "slides/bar_plots.html#horizontal-or-vertical-orientation",
    "href": "slides/bar_plots.html#horizontal-or-vertical-orientation",
    "title": "Data Visualizations using ggplot",
    "section": "Horizontal or Vertical Orientation",
    "text": "Horizontal or Vertical Orientation\n\ndir = 'h' (default)\ndir = 'v' (vertical/cols)"
  },
  {
    "objectID": "slides/bar_plots.html#legend-label-position-orientation",
    "href": "slides/bar_plots.html#legend-label-position-orientation",
    "title": "Data Visualizations using ggplot",
    "section": "Legend label Position Orientation",
    "text": "Legend label Position Orientation\n\nstrip.position = 'top'\nstrip.position = 'bottom'\nstrip.position = 'left'\nstrip.position = 'right'"
  },
  {
    "objectID": "slides/bar_plots.html#x-or-y-legend-position",
    "href": "slides/bar_plots.html#x-or-y-legend-position",
    "title": "Data Visualizations using ggplot",
    "section": "x or y legend position",
    "text": "x or y legend position\n\nswitch = 'x' or switch = 'y'\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x=mpg,y=wt)) +   \n  geom_point() +\n  facet_grid(facets = ~cyl,\n             switch = 'x'\n             )"
  },
  {
    "objectID": "slides/index.html",
    "href": "slides/index.html",
    "title": "Slides",
    "section": "",
    "text": "Maybe link to slides or make a dropdown"
  },
  {
    "objectID": "slides/sample_pres.html#step-1",
    "href": "slides/sample_pres.html#step-1",
    "title": "The Presentation",
    "section": "Step 1",
    "text": "Step 1\n\nSplit slides up with level 2 headers: ## Heading 2\nAdd some markdown + text and/or some R/Python code"
  },
  {
    "objectID": "slides/sample_pres.html#some-r-code",
    "href": "slides/sample_pres.html#some-r-code",
    "title": "The Presentation",
    "section": "Some R Code",
    "text": "Some R Code\n\n2 + 2\n\n[1] 4\n\n# comment"
  },
  {
    "objectID": "slides/sample_pres.html#slide-title",
    "href": "slides/sample_pres.html#slide-title",
    "title": "The Presentation",
    "section": "Slide Title",
    "text": "Slide Title\n\none\ntwo"
  },
  {
    "objectID": "slides/sample_pres.html#make-this-slide-red",
    "href": "slides/sample_pres.html#make-this-slide-red",
    "title": "The Presentation",
    "section": "Make this slide Red",
    "text": "Make this slide Red"
  },
  {
    "objectID": "slides/sample_pres.html#making-a-slide-incremental",
    "href": "slides/sample_pres.html#making-a-slide-incremental",
    "title": "The Presentation",
    "section": "Making a Slide Incremental",
    "text": "Making a Slide Incremental\nSay you want to reveal the content of slide piecemeal without rewriting separate slides with previous content.\n\nThen add some content…\n\n\nThen some more content"
  },
  {
    "objectID": "slides/sample_pres.html#omit-this-slide-visibility-hidden",
    "href": "slides/sample_pres.html#omit-this-slide-visibility-hidden",
    "title": "The Presentation",
    "section": "Omit This Slide {visibility = “hidden”}",
    "text": "Omit This Slide {visibility = “hidden”}"
  },
  {
    "objectID": "slides/sample_pres.html#add-links",
    "href": "slides/sample_pres.html#add-links",
    "title": "The Presentation",
    "section": "Add links",
    "text": "Add links\n\ncmc\n\n\n\nFirst item\nSecond item"
  },
  {
    "objectID": "slides/sample_pres.html#fragments",
    "href": "slides/sample_pres.html#fragments",
    "title": "The Presentation",
    "section": "Fragments",
    "text": "Fragments\n\nFade in\n\n\nFade out\n\n\nHighlight red\n\n\nFade in, then out"
  },
  {
    "objectID": "slides/sample_pres.html#fragments-nesting",
    "href": "slides/sample_pres.html#fragments-nesting",
    "title": "The Presentation",
    "section": "Fragments, nesting",
    "text": "Fragments, nesting\n\n\n\nFade in &gt; Turn red &gt; Semi fade out"
  },
  {
    "objectID": "slides/sample_pres.html#fragments-spans",
    "href": "slides/sample_pres.html#fragments-spans",
    "title": "The Presentation",
    "section": "Fragments, spans",
    "text": "Fragments, spans\nThis is an important sentence!\nMind the gap when riding the rail!"
  },
  {
    "objectID": "slides/sample_pres.html#column-layout",
    "href": "slides/sample_pres.html#column-layout",
    "title": "The Presentation",
    "section": "Column layout",
    "text": "Column layout\n\n\ncontents…s\n\ncontents…"
  },
  {
    "objectID": "slides/sample_pres.html#output-location",
    "href": "slides/sample_pres.html#output-location",
    "title": "The Presentation",
    "section": "Output Location",
    "text": "Output Location\n\n\nlibrary(ggplot2)\n\nmtcars |&gt; \n  ggplot(aes(x = disp, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", formula = \"y~x\")"
  },
  {
    "objectID": "slides/slide_page.html",
    "href": "slides/slide_page.html",
    "title": "slide page",
    "section": "",
    "text": "We need a few libraries for file management, data frame manipulation, and plotting.\n\n#library(flipbookr)\nlibrary(here)\n\nhere() starts at C:/Users/gcook/Sync/git/dataviz23\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "slides/slide_page.html#loading-libraries",
    "href": "slides/slide_page.html#loading-libraries",
    "title": "slide page",
    "section": "",
    "text": "We need a few libraries for file management, data frame manipulation, and plotting.\n\n#library(flipbookr)\nlibrary(here)\n\nhere() starts at C:/Users/gcook/Sync/git/dataviz23\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "slides/slide_page.html#new",
    "href": "slides/slide_page.html#new",
    "title": "slide page",
    "section": "New",
    "text": "New\nNotes"
  },
  {
    "objectID": "slides/slide_page.html#code",
    "href": "slides/slide_page.html#code",
    "title": "slide page",
    "section": "Code",
    "text": "Code\n{r}\n2 + 3"
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Semester\nFall 2023\n\n\nSection\nPSYC 167, Sect-01\n\n\nDay Time\nTuesday 2:45 - 05:30PM (Pacific)\n\n\nLocation\nLocation: Roberts South, 104\n\n\nOffice Hours\nSee Discord\n\n\nInstructor\nGabriel I. Cook\n\n\nContact\nEmail: gcook@CMC.edu(please put ’PSYC 167 in subject line)\n\n\nCredit\n3 hours; 1 credits"
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nData visualization is the science and art of creating graphical representations of information and data. Visual representations provide accessible ways to see patterns, trends, and outliers in data. Variables like position, size, and orientation can focus attention and guide perception but can also bias interpretation of data. Students will learn how well-designed visualizations can reduce bias and improve comprehension for data thereby facilitating data-driven decision-making. Students will explore techniques for creating effective visualizations based on principles from cognitive and perceptual psychology, art, and design. Students will gain hands-on experience coding real-world data visualizations for local offices, organizations, and industry participants.\nThe course is targeted toward students with expressed interest in cognition and cognitive biases related to data communication, students interested in using visualization to communicate their own messages, and students interested in creating better visualization tools and systems. Students will engage in discussions of the readings, complete programming and data analysis assignments, and prepare a final project involving storytelling with data visualizations.\nPrerequisite: For data-science sequence or majors (level-A data-science course); recommended a course in Perception, Visual Attention, Cognitive Psychology, or Cognitive Science; or permission of instructor\n\nCourse Specific Learning Goals\n\nUnderstand various uses of visual variables to create data visualizations;\nUnderstand both advantages and disadvantages of using visual variables to create data visualizations;\nAnalyze, critique, and revise data visualizations;\nUnderstand the functionality of the ggplot2 library for creating data visualizations;\nPresent data with visual representations for your target audience, task, and data;\nIdentify appropriate data visualization techniques given particular requirements imposed by the data and/or audience; and\nApply appropriate design principles in the creation of presentations and visualizations"
  },
  {
    "objectID": "syllabus/syllabus.html#courses-at-cmc",
    "href": "syllabus/syllabus.html#courses-at-cmc",
    "title": "Syllabus",
    "section": "Courses at CMC",
    "text": "Courses at CMC\n\nFaculty Handbook 5.4.2 Work Load in Classes\n“Courses should involve approximately equal workloads. Generally, students should expect to spend from 6 to 8 hours per week, over and above the time spent in classroom, on each course.” – CMC Faculty Handbook\nIf you do the math, including class time of 2½ hours, you should expect to allocate 8 ½ to 10 ½ hours per week for courses at CMC. “Per week” is a key phrase; courses are not designed for nondistributed cramming."
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials-and-textbook",
    "href": "syllabus/syllabus.html#course-materials-and-textbook",
    "title": "Syllabus",
    "section": "Course Materials and Textbook",
    "text": "Course Materials and Textbook\nAll of the course materials will be available on this course website .\nLink to the course website: https://slicesofdata.github.io/dataviz23\n\nRequired Equipment:\nComputer: current Mac (macOS) or PC (Windows or Linux) with high-speed internet connection, capable of running R and RStudio\n\n\nRequired Software:\nR and RStudio: Students will be required to use R and RStudio software. Note: Install Version will be provided. Before installing RStudio, you must also download and install the base R software at https://www.r-project.org/ that is appropriate for your computer’s operating system. RStudio can be downloaded for free at https://www.rstudio.com. You are expected to install R and RStudio on your personal computer by downloading the software from the links above. You will also have to install appropriate libraries throughout the course. Further instructions will be provided.\n\n\nReading Materials/Textbook(s)\nReadings will be taken from different sources and will appear in each topic module.\n\nWickham, H., Navarro. D., & Pedersen, T. L.. ggplot2: Elegant Graphics for Data Analysis, 3rd ed.\nClaus O. Wilke (2019). Fundamentals of Data Visualization. O’Reilly Media.\nXie, Y., Allaire, J. J., & Grolemund, G. R Markdown: The Definitive Guide\nKieran Healy (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nNordmann, E. & DeBruine, L. (2023). Applied Data Skills: Processing & Presenting Data (2023) . https://psyteachr.github.io/ads-v2\n\nThese textbooks are free and open-source."
  },
  {
    "objectID": "syllabus/syllabus.html#course-structure",
    "href": "syllabus/syllabus.html#course-structure",
    "title": "Syllabus",
    "section": "Course Structure",
    "text": "Course Structure\nStudents are expected to participate in all aspects of the class. This class involves developing topic knowledge and computer programming skills for visualizing data. The assumption is that students possess varying levels of skills related to programming. Class time will be spend engaging in a variety of tasks and activities, including lectures, group-work, applied coding activities, presentations, and discussions."
  },
  {
    "objectID": "syllabus/syllabus.html#course-schedule",
    "href": "syllabus/syllabus.html#course-schedule",
    "title": "Syllabus",
    "section": "Course Schedule",
    "text": "Course Schedule\n\n\n\n\n\n\n\n\n\n\n\nDate\nWeek\nModule\nTopic\n\n\n\n\n29-Aug\n1\n1\nIntroduction & Project Management\n\n\n\n1\n2\nGraphical Perception\n\n\n5-Sep\n2\n3\nData Frame Manipulation and Wrangling\n\n\n\n2\n4\nData Subsets and Summaries\n\n\n12-Sep\n3\n5\nThe Grammar of Graphics\n\n\n\n3\n6\nVisualizing Amounts\n\n\n19-Sep\n4\n7\nVisualizing Associations\n\n\n\n4\n8\nSpatial Position and Adjustment\n\n\n26-Sep\n5\n9\nConsiderations in Data Visualization\n\n\n\n5\n10\nColor Scales and Palettes\n\n\n3-Oct\n6\n11\nHistograms and Density Plots*\n\n\n\n6\n12\nCoordinates, Axes and Position Scales\n\n\n10-Oct\n7\n13\nStatistical Transformations (Data as-is Versus Summaries)\n\n\n\n7\n14\nMore Data Wrangling\n\n\n17-Oct\n8\n\nFall Break (no class)\n\n\n24-Oct\n9\n15\nVisualizing More Distributions\n\n\n\n9\n16\nVisualizing Uncertainty\n\n\n31-Oct\n10\n\nMid-Term Presentation\n\n\n7-Nov\n11\n17\nVisualizing Trends\n\n\n\n11\n18\nLegends and Arrangement\n\n\n14-Nov\n12\n19\nDesigning Perceptually Efficient Visualizations\n\n\n\n12\n20\nAnnotation and Text\n\n\n21-Nov\n13\n21\nMulti-Panel Plots: Faceting and Layers\n\n\n\n13\n22\nAttentional Control and Tradeoffs\n\n\n28-Nov\n14\n23\nTitles Captions & Tables\n\n\n\n14\n24\nFigure Design (Themes)\n\n\n5-Dec\n15\n\nPresentation (Last day of Instruction)"
  },
  {
    "objectID": "syllabus/syllabus.html#assignments-and-grading",
    "href": "syllabus/syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and Grading",
    "text": "Assignments and Grading\nThis is an engagement and skills-acquisition based course. At the beginning of the course and throughout, students will be given instruction on building and maintaining a website using quarto and github pages. Each week students will contribute blog posts and other content to their websites in response to module assignments. Students will be expected to submit URL links to their blogs using Blackboard. Students are expected to attend and participate in each class. The final project includes conducting, communicating, and preserving a reproducible data analysis project.\n\n**Evaluation and Grading*\n\n\n\n\n\nItem\nTotal Points\n\n\n\n\nKnowledge Assessments\n10\n\n\nWeekly Conceptual and Programming\n30\n\n\nMidterm Presentation\n20\n\n\nFinal Project (pres and report)\n40\n\n\n\n\n\nPercentage grades are converted to letter grades according to the following rubric.\n\n\n\n\n\nLetter\nPoint Range\n\n\n\n\nA\n94 - 100\n\n\nA-\n90 - 93.99\n\n\nB+\n87 - 89.99\n\n\nB\n84 - 86.99\n\n\nB-\n80 - 83.99\n\n\nC+\n77 - 79.99\n\n\nC\n74 - 76.99\n\n\nC-\n70 - 73.99\n\n\nD+\n67 - 69.99\n\n\nD\n64 - 66.99\n\n\nD-\n60 - 63.99\n\n\nF\n0 - 59.99"
  },
  {
    "objectID": "syllabus/syllabus.html#attendance",
    "href": "syllabus/syllabus.html#attendance",
    "title": "Syllabus",
    "section": "Attendance",
    "text": "Attendance\nStudents are expected to attend and participate in each class."
  },
  {
    "objectID": "syllabus/syllabus.html#course-policies",
    "href": "syllabus/syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\n\nDue dates\nDue dates are suggestions for completing coursework on a weekly basis. You may be able to work ahead, but you are not encouraged to fall behind.\nYou should email me if you have an exceptional circumstance preventing you from taking an assessment during an assessment week.\n\n\nChanges to the syllabus\nThe syllabus may be updated for clarity or to make adjustments for pedagogical purposes. The most current version of the syllabus is always available from the course website.\n\n\nAccessibility\nIn order to receive disability-related academic accommodations students must first be registered with the Center for Student Disability Services. Students who have a documented disability or suspect they may have a disability are invited to set up an appointment with the Director of the Center for Student Disability Services, at 718-951-5538. If you have already registered with the Center for Student Disability Services, please provide your professor with the course accommodation form and discuss your specific accommodation with him/her.\n\n\n\nEmail Correspondence\nI will regularly use e-mail but you should contact me on the Discord channel, which is where I will post announcements, changes in the syllabus, reminders, etc. You are responsible for monitoring Discord and e-mail regularly.\nIf you have questions please email me:\n\nAlways add ’PSYC 167” to the subject line\nemail me at: gcook@cmc.edu"
  },
  {
    "objectID": "syllabus/syllabus.html#universitys-policy-on-academic-integrity",
    "href": "syllabus/syllabus.html#universitys-policy-on-academic-integrity",
    "title": "Syllabus",
    "section": "University’s policy on Academic Integrity",
    "text": "University’s policy on Academic Integrity\nThe faculty and administration of Claremont McKenna College support an environment free from cheating and plagiarism. Each student is responsible for being aware of what constitutes cheating and plagiarism and for avoiding both.\n\nViolations of Academic integrity\nEach student is responsible for understanding and acting in accordance with the College’s policy on Academic Integrity, described below.\n\n\nAcademic Integrity\nAlthough you may find yourself working on assignments with a partner or discussing them with classmates, all assignments should be your one original work. You are not to share materials with other students if that material has the potential of being copied, even if your intention is not to allow a classmate to copy your work. Any signs of academic dishonesty, even those raised by concerned peers, will be submitted to the Academic Standards Committee for review. Although I do not anticipate any events of academic dishonesty, any form of dishonestly of any form will not be tolerated. Many students are unclear of the definition of plagiarism so I have posted some CMC links to information that I believe will clarify the issue. In addition, any work completed for another course, past or present, may not be submitted for a grade for this course and would be a violation of integrity. http://registrar.academic.claremontmckenna.edu/acpolicy/default.asp\n\nStatement of Reasonable Accommodations\nYour experience in this class is important to me. If you have already established accommodations with Disability & Accessibility Services at CMC, please communicate your approved accommodations to me during the first week of the semester so we can discuss your needs in this course ASAP. You can start this conversation by forwarding me your accommodation letter. If you have not yet established accommodations through Accessibility Services but have a temporary health condition or permanent disability (conditions include but are not limited to: mental health, attention-related, learning, vision, hearing, physical or health), you are encouraged to contact Assistant Dean for Disability Services & Academic Success, Kari Rood, at AccessibilityServices@cmc.edu to ask questions and/or begin the process. General information and accommodations request information be found at the CMC DOS Accessibility Service’s website. Please note that arrangements must be made with advance notice in order to access the reasonable accommodations. You are able to request accommodations from CMC Accessibility Services at any point in the semester. Be mindful that this process may take some time to complete and accommodations are not retroactive. I would err on the side of caution and make sure your accommodations are sent to me even if you do not believe you need them as some students only learn they may need time after completing assessment. The Americans With Disabilities Act (ADA) and Section 504 of the Rehabilitation Act do not make accommodations retroactive. If you are approved for extra testing time for example, you must do so before an electronic assessment is posted in order for it to be integrated into the assessment. Claremont McKenna College values creating inclusive and accessible learning environments consistent with federal and state law. If you are not a CMC student, please connect with the Disability & Accessibility Services Coordinator on your campus regarding a similar process.\n\n\n\nFYI on cheating etc.\nRemember, you are responsible for not cheating or violating CMC’s Academic Integrity Policy. You are responsible for understanding that policy, and for conducting yourself in a manner such that you do not violate the policy.\nThe above link lists many examples of cheating and plagiarism that are not allowed. There are many more specific acts that you should NOT do. Here is an additional list of activities that will be sufficient cause for immediate failure in the course.\n\nDo not take pictures of exam or quiz questions and share them with other students\nDo not give other students answers during an exam or quiz, or any other assignment that is an individual assignment\nDo not copy work from another source and submit it as your own\nDo not copy and paste text from the internet and submit it as your own words\nDo not copy and paste text and slightly alter wording to pass the work off as your own\nDo not hire someone else to do the coursework for you\nDo not copy and paste text into a paraphrasing app, and then submit the output of the paraphrasing app as your own work\nDo not copy random words from the internet that have nothing to do with the assignment and submit them as your own work.\nDo not work on individual assignments with other students, share answers or other material, and then all hand in versions of the same thing that are slightly different.\nDo not plagiarize yourself by submitting work that you have previously completed in another class.\n\n\n\nMandate to report violations\nIf a faculty member suspects a violation of academic integrity and, upon investigation, confirms that violation, or if the student admits the violation, the faculty member MUST report the violation. Students should be aware that faculty may use plagiarism detection software.\nThere is no excuse for cheating. Students who are caught cheating may receive a failing grade for the entire course. All students who violate the academic integrity will receive a Faculty Action Report, which will go on their personal file at the Academic Integrity Office."
  },
  {
    "objectID": "syllabus/syllabus.html#faq",
    "href": "syllabus/syllabus.html#faq",
    "title": "Syllabus",
    "section": "FAQ",
    "text": "FAQ\nIf you have questions about the syllabus, let’s talk about it in class, and/or please create a thread to discuss the question on the discussion board for this course on Blackboard."
  }
]