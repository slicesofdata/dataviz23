[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Nothing to see here"
  },
  {
    "objectID": "index.html#psyc-167-data-visualization",
    "href": "index.html#psyc-167-data-visualization",
    "title": "**PSYC167**",
    "section": "PSYC 167: Data Visualization",
    "text": "PSYC 167: Data Visualization\nThis is the course website for PSYC 167: Data Visualization, taught by Prof. Gabriel I. Cook; 1 credit\nDescription\nData visualization is the science and art of creating graphical representations of information and data. Visual representations provide accessible ways to see patterns, trends, and outliers in data. Variables like position, size, and orientation can focus attention and guide perception but can also bias interpretation of data. Students will learn how well-designed visualizations can reduce bias and improve comprehension for data thereby facilitating data-driven decision-making. Students will explore techniques for creating effective visualizations based on principles from cognitive and perceptual psychology, art, and design. Students will gain hands-on experience coding real-world data visualizations for local offices, organizations, and industry participants.\nThe course is targeted toward students with expressed interest in cognition and cognitive biases related to data communication, students interested in using visualization to communicate their own messages, and students interested in creating better visualization tools and systems. Students will engage in discussions of the readings, complete programming and data analysis assignments, and prepare a final project involving storytelling with data visualizations.\nSources\nThis course will use open-educational resources, typically licensed on creative commons."
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html",
    "href": "modules/01_installing_r_and_rstudio.html",
    "title": "Installing R & RStudio",
    "section": "",
    "text": "For this course, we will use R and RStudio for manipulating data and creating data visualizations. The first step is to install these pieces of software so that you can use them. You may find helpful reading https://psyteachr.github.io/ads-v2/01-intro.html"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#read",
    "href": "modules/01_installing_r_and_rstudio.html#read",
    "title": "Installing R & RStudio",
    "section": "",
    "text": "For this course, we will use R and RStudio for manipulating data and creating data visualizations. The first step is to install these pieces of software so that you can use them. You may find helpful reading https://psyteachr.github.io/ads-v2/01-intro.html"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#do",
    "href": "modules/01_installing_r_and_rstudio.html#do",
    "title": "Installing R & RStudio",
    "section": "Do",
    "text": "Do\n\nInstall R\nInstall RStudio\nConfigure RStudio"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#determine-the-version-of-your-computers-operating-system",
    "href": "modules/01_installing_r_and_rstudio.html#determine-the-version-of-your-computers-operating-system",
    "title": "Installing R & RStudio",
    "section": "Determine the version of your computer's operating system",
    "text": "Determine the version of your computer's operating system\nYour version of operating system will dictate which version of R to download and install. Make note of your computer's operating system.\nWindows systemsare easier and Windows 10 and 11 operating systems will both use the same R versions.\nMacs are somewhat more complicated. The version depends on your cpu. Here is how you can determine:\nhttps://www.howtogeek.com/706226/how-to-check-if-your-mac-is-using-an-intel-or-apple-silicon-processor/ .\nThere will be two cpu options, Intel 64-bit for macOS 10.13 or Apple silicon arm64 for macOS 11 and higher.\nCloud Options:\nIf you do not have a laptop (let me know) or do not have 5GB of hard drive space available on your computer, you might consider a cloud version of the software. One is maintained by Posit (formerly RStudio) and the other is maintained by CMC.\n1. https://posit.cloud/plans/free     (25 free compute hours a month – make time out)\n2. Remote Desktop Protocol  (No limit on compute hours) (contact me if interested)"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#download-r",
    "href": "modules/01_installing_r_and_rstudio.html#download-r",
    "title": "Installing R & RStudio",
    "section": "Download R",
    "text": "Download R\nOnce you know your processor, navigate to https://cran.r-project.org/ and in the \"Download and Install R\" section, select your operating system. You can also select from below and follow the indented sections that follow.\n\nDownload R for Linux (Debian, Fedora/Redhat, Ubuntu)\nDownload R for macOS\nDownload R for Windows\n\n***Windows*** users should select the **base** version of R and download version **4.3.1** **(no other version)** to your computer. If this version is not on the main page, go to the \\\"Other Builds\\\" section and select \\\"previous releases\\\" and download the correct version.\n\n***Mac*** users should download either **R-4.3.1.pkg** or **R-4.3.1-x86_64.pkg** version depending on the cpu noted earlier. **Do not** download any version other than 4.3.1 and please do not update throughout the semester."
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#download-rstudio",
    "href": "modules/01_installing_r_and_rstudio.html#download-rstudio",
    "title": "Installing R & RStudio",
    "section": "Download RStudio",
    "text": "Download RStudio\nUse the urls below to download RStudio and save it to the same directory location on your computer as you saved R.  \nWindows 10/11: https://download1.rstudio.org/electron/windows/RStudio-2023.06.2-561.exe\nMacOS 10.15+: https://download1.rstudio.org/electron/macos/RStudio-2023.06.2-561.dmg\nLinux: go to https://posit.co/download/rstudio-desktop/\nNote: If you have a 32bit operating system, you will need to install an older version: https://www.rstudio.com/products/rstudio/older-versions/"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#install-r-and-rstudio-on-your-computer",
    "href": "modules/01_installing_r_and_rstudio.html#install-r-and-rstudio-on-your-computer",
    "title": "Installing R & RStudio",
    "section": "Install R and RStudio on your Computer",
    "text": "Install R and RStudio on your Computer\nInstall R first and then install RStudio.\nInstalling should be easy and you can accept all of the defaults although the desktop icons are not needed, especially for R because you will never need it; RStudio will find R for you. You can follow these videos for simple installing.\nPC: How to Install R and R Studio on Windows 10/11\nMac: Installing R and RStudio on a Mac\nNote: If you leave the desktop icon for R, you can remove that later. You will never need it because RStudio will find R for you.\nAdditional Step for Mac Users:\nDownload and Install XQuartz\nSome functions in R require an \"X11 Server\" and/or libraries associated with an X11 server. Apple does not provide this software with OS X anymore so unfortunately you have to do it on your own via a third-party application called XQuartz for OS X 10.9 or later.\nUse the url below to download the XQuartz file and save it to your computer. Follow the same install instructions as above for installing the XQuartz file.\nFor macOS 10.9 or later, download this XQuartz file and save it to your computer and install: https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.5/XQuartz-2.8.5.pkg"
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#verify-that-rstudio-is-communicating-correctly-with-r",
    "href": "modules/01_installing_r_and_rstudio.html#verify-that-rstudio-is-communicating-correctly-with-r",
    "title": "Installing R & RStudio",
    "section": "Verify that RStudio is communicating correctly with R",
    "text": "Verify that RStudio is communicating correctly with R\nLaunch the RStudio application.\nIf RStudio and R are communicating correctly, you should see an RStudio window open with the R console opened which should look similar to that shown below. Your R version should be listed at the top of the console (4.3.1 Beagle Scouts)."
  },
  {
    "objectID": "modules/01_installing_r_and_rstudio.html#configure-rstudio",
    "href": "modules/01_installing_r_and_rstudio.html#configure-rstudio",
    "title": "Installing R & RStudio",
    "section": "Configure RStudio",
    "text": "Configure RStudio\nA. Go to Tools -&gt; Global Options under the General + Basic Tab\n· R Sessions -&gt; R version: There should be a path to the installed R version listed if you installed R before R Studio. You should not need to change this unless you have another version installed on your system. If you do have multiple versions, browse to version 4.3.1. Do not update R or any libraries during this course.\nB. Other options:Check the other checkboxes as indicated in the images below."
  },
  {
    "objectID": "modules/02_creating_a_posit_account.html",
    "href": "modules/02_creating_a_posit_account.html",
    "title": "Creating a Posit Account",
    "section": "",
    "text": "Read the intro to R and RStudio chapter from the textbook.\nhttps://psyteachr.github.io/ads-v2/01-intro.html"
  },
  {
    "objectID": "modules/02_creating_a_posit_account.html#read",
    "href": "modules/02_creating_a_posit_account.html#read",
    "title": "Creating a Posit Account",
    "section": "",
    "text": "Read the intro to R and RStudio chapter from the textbook.\nhttps://psyteachr.github.io/ads-v2/01-intro.html"
  },
  {
    "objectID": "modules/02_creating_a_posit_account.html#additional-resources",
    "href": "modules/02_creating_a_posit_account.html#additional-resources",
    "title": "Creating a Posit Account",
    "section": "Additional resources",
    "text": "Additional resources\n\nQuarto\nThe quarto website contains many helpful examples. We will cover aspects throughout the semester.\nhttps://quarto.org\n\n\nGithub\nWe will be making use of Github to store and share your course blog and website.\nWe will troubleshoot all Github issues individually and in class. If you want to learn more, then I recommend this free resource.\nhttps://happygitwithr.com"
  },
  {
    "objectID": "modules/02_creating_a_posit_account.html#week-2-assignment-make-a-tip-sheet",
    "href": "modules/02_creating_a_posit_account.html#week-2-assignment-make-a-tip-sheet",
    "title": "Creating a Posit Account",
    "section": "Week 2 Assignment: Make a tip sheet",
    "text": "Week 2 Assignment: Make a tip sheet\nWe are beginning week 2 on Monday February, 6th, 2023. By this point you should have your quarto blog published on github.com, and have the url to your blog submitted to the first assignment on Blackboard. If you need help completing this step, please email me.\nThis week we will cover the first chapter of the textbook, which goes into several important details about using Rstudio. In section 1.2, the authors recommend that “now would be a good time to create a notebook where you can keep a record of useful hints and tips and things to try when your code isn’t working.”\nMaking a tip sheet for yourself is the assignment for this weeks blog post.\n\nInstructions\n\nMake a new blog post where you can write “tips” and notes as you are learning about Rstudio this week. Please feel free to make notes during class and stuff this blog post with as many things that will be helpful for you to remember.\nSubmit the URL to your tips post to the week 2 assignment on blackboard."
  },
  {
    "objectID": "modules/03_installing_git_and_github_desktop.html",
    "href": "modules/03_installing_git_and_github_desktop.html",
    "title": "Installing Git & GitHub Desktop",
    "section": "",
    "text": "Read the intro to R and RStudio chapter from the textbook.\nhttps://psyteachr.github.io/ads-v2/01-intro.html"
  },
  {
    "objectID": "modules/03_installing_git_and_github_desktop.html#read",
    "href": "modules/03_installing_git_and_github_desktop.html#read",
    "title": "Installing Git & GitHub Desktop",
    "section": "",
    "text": "Read the intro to R and RStudio chapter from the textbook.\nhttps://psyteachr.github.io/ads-v2/01-intro.html"
  },
  {
    "objectID": "modules/03_installing_git_and_github_desktop.html#do",
    "href": "modules/03_installing_git_and_github_desktop.html#do",
    "title": "Installing Git & GitHub Desktop",
    "section": "Do",
    "text": "Do\n\nCreate a GitHub account\nInstall Git\nConfigure Git with RStudio"
  },
  {
    "objectID": "modules/03_installing_git_and_github_desktop.html#additional-resources",
    "href": "modules/03_installing_git_and_github_desktop.html#additional-resources",
    "title": "Installing Git & GitHub Desktop",
    "section": "Additional resources",
    "text": "Additional resources\n\nGithub\nWe will be use of Github to backup, store, and share your code with me and your collaborators.\nWe will troubleshoot Github challenges both in class and in person (come see me). If you want to learn more, I also recommend this free resource, though it’s rather advanced.\nhttps://happygitwithr.com (updated reguarly)"
  },
  {
    "objectID": "modules/04_project_management_with_here.html#the-here-library",
    "href": "modules/04_project_management_with_here.html#the-here-library",
    "title": "Project management with {here}",
    "section": "The here library",
    "text": "The here library"
  },
  {
    "objectID": "modules/Introduction/index.html",
    "href": "modules/Introduction/index.html",
    "title": "Modules x",
    "section": "",
    "text": "#source(here::here(\"R\", \"_common.R\"))\n# from source\nslide_order &lt;- tolower(c(\"02-content.qmd\", \"01-content.qmd\", \"Introduction\"))\nslide_name &lt;- tolower(basename(this.path::this.path()))\nslide_name &lt;- \"Introduction\"\ntesting\nWelcome to the orientation learning module for PSYC 167. We have a lot of ground to cover this semester and in return you will have much to showcase for yourself.\nIf you are willing to embrace challenge and troubleshooting, you will walk away with:\nWarning: If you are not up for the challenge, you may feel overwhelmed, likely be miserable, and will want to give up. If that’s you, there are other courses that may be a better fit for you.\nWe will cover everything here and more on the first day of class. See you there."
  },
  {
    "objectID": "modules/Introduction/index.html#goals",
    "href": "modules/Introduction/index.html#goals",
    "title": "Modules x",
    "section": "Goals",
    "text": "Goals\n\nGeneral course orientation\nget you ready for the first week"
  },
  {
    "objectID": "modules/Introduction/index.html#read",
    "href": "modules/Introduction/index.html#read",
    "title": "Modules x",
    "section": "Read",
    "text": "Read\nRead the syllabus for this course."
  },
  {
    "objectID": "modules/Introduction/index.html#getting-started-goals",
    "href": "modules/Introduction/index.html#getting-started-goals",
    "title": "Modules x",
    "section": "Getting started goals",
    "text": "Getting started goals\nThere are many possibilities for technical difficulties as we get started. The computer room is equipped with the software that we need, however, I strongly encourage you to install the necessary software on your own computer.\nThroughout the semester we will be using software called R, Rstudio, quarto, and github. All of this software is free and open-source, and can be installed on windows, mac, or linux."
  },
  {
    "objectID": "modules/Introduction/index.html#week-1-assignment",
    "href": "modules/Introduction/index.html#week-1-assignment",
    "title": "Modules x",
    "section": "Week 1 assignment",
    "text": "Week 1 assignment\n\nenter here"
  },
  {
    "objectID": "modules/Introduction/index.html#more-goals-for-week-1",
    "href": "modules/Introduction/index.html#more-goals-for-week-1",
    "title": "Modules x",
    "section": "More Goals for Week 1",
    "text": "More Goals for Week 1"
  },
  {
    "objectID": "modules/Introduction/introduction.html",
    "href": "modules/Introduction/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "#source(here::here(\"R\", \"_common.R\"))\n# from source\nslide_order &lt;- c(\"02-content.qmd\", \"01-content.qmd\", \"introduction.qmd\")\nslide_name &lt;- basename(this.path::this.path())\nslide_name &lt;- \"introduction.qmd\"\nslide_num &lt;- match(slide_name, slide_order)\ntesting\nWelcome to the orientation learning module for PSYC 167. We have a lot of ground to cover this semester and in return you will have much to showcase for yourself.\nIf you are willing to embrace challenge and troubleshooting, you will walk away with:\nWarning: If you are not up for the challenge, you may feel overwhelmed, likely be miserable, and will want to give up. If that’s you, there are other courses that may be a better fit for you.\nWe will cover everything here and more on the first day of class. See you there."
  },
  {
    "objectID": "modules/Introduction/introduction.html#goals",
    "href": "modules/Introduction/introduction.html#goals",
    "title": "Introduction",
    "section": "Goals",
    "text": "Goals\n\nGeneral course orientation\nget you ready for the first week"
  },
  {
    "objectID": "modules/Introduction/introduction.html#read",
    "href": "modules/Introduction/introduction.html#read",
    "title": "Introduction",
    "section": "Read",
    "text": "Read\nRead the syllabus for this course."
  },
  {
    "objectID": "modules/Introduction/introduction.html#getting-started-goals",
    "href": "modules/Introduction/introduction.html#getting-started-goals",
    "title": "Introduction",
    "section": "Getting started goals",
    "text": "Getting started goals\nThere are many possibilities for technical difficulties as we get started. The computer room is equipped with the software that we need, however, I strongly encourage you to install the necessary software on your own computer.\nThroughout the semester we will be using software called R, Rstudio, quarto, and github. All of this software is free and open-source, and can be installed on windows, mac, or linux."
  },
  {
    "objectID": "modules/Introduction/introduction.html#week-1-assignment",
    "href": "modules/Introduction/introduction.html#week-1-assignment",
    "title": "Introduction",
    "section": "Week 1 assignment",
    "text": "Week 1 assignment\n\nenter here"
  },
  {
    "objectID": "modules/Introduction/introduction.html#more-goals-for-week-1",
    "href": "modules/Introduction/introduction.html#more-goals-for-week-1",
    "title": "Introduction",
    "section": "More Goals for Week 1",
    "text": "More Goals for Week 1"
  },
  {
    "objectID": "modules/Introduction/introduction2.html",
    "href": "modules/Introduction/introduction2.html",
    "title": "Introduction2",
    "section": "",
    "text": "#source(here::here(\"R\", \"_common.R\"))\n# from source\nslide_order &lt;- c(\"02-content.qmd\", \"01-content.qmd\", \"introduction.qmd\")\nslide_name &lt;- basename(this.path::this.path())\nslide_name &lt;- \"introduction.qmd\"\nslide_num &lt;- match(slide_name, slide_order)\ntesting\nWelcome to the orientation learning module for PSYC 167. We have a lot of ground to cover this semester and in return you will have much to showcase for yourself.\nIf you are willing to embrace challenge and troubleshooting, you will walk away with:\nWarning: If you are not up for the challenge, you may feel overwhelmed, likely be miserable, and will want to give up. If that’s you, there are other courses that may be a better fit for you.\nWe will cover everything here and more on the first day of class. See you there."
  },
  {
    "objectID": "modules/Introduction/introduction2.html#goals",
    "href": "modules/Introduction/introduction2.html#goals",
    "title": "Introduction2",
    "section": "Goals",
    "text": "Goals\n\nGeneral course orientation\nget you ready for the first week"
  },
  {
    "objectID": "modules/Introduction/introduction2.html#read",
    "href": "modules/Introduction/introduction2.html#read",
    "title": "Introduction2",
    "section": "Read",
    "text": "Read\nRead the syllabus for this course."
  },
  {
    "objectID": "modules/Introduction/introduction2.html#getting-started-goals",
    "href": "modules/Introduction/introduction2.html#getting-started-goals",
    "title": "Introduction2",
    "section": "Getting started goals",
    "text": "Getting started goals\nThere are many possibilities for technical difficulties as we get started. The computer room is equipped with the software that we need, however, I strongly encourage you to install the necessary software on your own computer.\nThroughout the semester we will be using software called R, Rstudio, quarto, and github. All of this software is free and open-source, and can be installed on windows, mac, or linux."
  },
  {
    "objectID": "modules/Introduction/introduction2.html#week-1-assignment",
    "href": "modules/Introduction/introduction2.html#week-1-assignment",
    "title": "Introduction2",
    "section": "Week 1 assignment",
    "text": "Week 1 assignment\n\nenter here"
  },
  {
    "objectID": "modules/Introduction/introduction2.html#more-goals-for-week-1",
    "href": "modules/Introduction/introduction2.html#more-goals-for-week-1",
    "title": "Introduction2",
    "section": "More Goals for Week 1",
    "text": "More Goals for Week 1"
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Modules",
    "section": "",
    "text": "This course consists of various content modules that introduce students to data visualization techniques using R. Techniques, however, should not be applied haphazardly but instead with respect to the biological and cognitive limitations of the user. The general principles of data visualization taught can be applied to programming languages other than R (e.g., Python, D3, etc.).\nThe modules consists of content from chapters of various textbooks that are freely available:"
  },
  {
    "objectID": "modules/index.html#module-structure",
    "href": "modules/index.html#module-structure",
    "title": "Modules",
    "section": "Module structure",
    "text": "Module structure\nIn general, modules will contain readings, additional resources, and weekly assignments.\nThe modules will be updated across the semester as needed. There are more modules on this course site because some modules provide other useful information. The names of the modules listed in the syllabus, however, do match the names in the module listing.\n\n#mtcars\n\n\n#library(dplyr)"
  },
  {
    "objectID": "resources/dataviz_readings.html",
    "href": "resources/dataviz_readings.html",
    "title": "Readings",
    "section": "",
    "text": "You should read the enumerated items (those prefaced by numbers); others can supplemental.\n\nTopic\n\nxxx\nxxx\n\n\n\nGuided Practice with Posit Primers\n\nBar Plots\nBox Plots\nScatterplots\nLine Plots\n\n\n\nTopic\n\nxxx\nxxx\n\n\n\nThe Grammar of Graphics using ggplot\n\nxxx\n\n\n\nMapping Data to Visual Elements\n\nMapping Data to Aesthetics\nMake a Plot\n\ni) xxx\n\n\nAesthetic Considerations Designing Perceptually Efficient Visualizations\n\n\nSpatial Position and Adjustment (CH 7)\n\nAddressing Overplotting with geom_jitter()\n\n\n\n\nStatistical Transformations: Data as-is Versus Summaries\n\n\nData Preparation using dplyr\n\nSelecting Rows and Columns: select() and filter()\n1.2. Grouping/Pooling Data: `group_by()`\n\nData aggregation: summarize()\n\n\n\n\nScales and Axes (CH 6)\n\n\nVisualizing Comparisons\n\nxxx\nxxx\n\n\n\nVisualizing Uncertainty\n\nHistograms/Density Plots\nxxx\n\n\n\nVisualizing Associations and Trends\n\nScatterplots Using group_by for subgroups\nLine Plots\n\nVisualizing Amounts Visualizing Proportions or Ratios\nhttps://clauswilke.com/dataviz/visualizing-amounts.html\n\n\nMaking Visualizations Better\n\nPrinciple of Proportional Ink\nColor Pitfalls\nStorytelling\nWhy People Make Bad Charts (and What to Do When it Happens)\nRefining Plots\n\n\n\nAnnotation\n\nClaus Wilke, Claus Wilke, *Fundamentals of Data Visualization\n\nredundant-coding.html\nSmall Multiples\nTitle and Captions\nAxis Labesls\n\n\n\n\nEmphasis\n\nCalling Attention to Points\nAnnotating Points\nHighlighting Sections\n\n\n\nImage Formats\n\njpg, png, or svg?\nFile Formats Explained\n\n\nWhats the difference between jpg png and gif\nKieran Healy, Data Visualization\n\nxx\n\n\n[Cara Thompson, “Level Up Your Labels: Tips and Tricks for Annotating Plots”] (https://www.cararthompson.com/talks/user2022)\n\n\nReproduce vs. Replicate\n\nWhat is the reprex library?\nReproducible example with reprex\n\n\n\n\n\nAnimation\n\n\n\n\nflowchart RL\n  B(Data) --&gt; A(Plot) \n  C(Geometry) --&gt; A(Plot) \n  D(Statistics) --&gt; A(Plot)\n  E(Coordinate System) --&gt; A(Plot)\n  F(Theme) --&gt; A(Plot)"
  },
  {
    "objectID": "resources/dataviz_tools.html#websites",
    "href": "resources/dataviz_tools.html#websites",
    "title": "Tools for Data Visualization",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/\n\n\n\nColor Codes\n\nHTML colors: https://htmlcolorcodes.com/\n\n\n\nVisualize a palette for different types of colorblindness\n\nViz Palette https://projects.susielu.com/viz-palette\n\n\n\nWhat do your photos/images look like to others?\n\nCoblis colorblindness imulator: https://www.color-blindness.com/coblis-color-blindness-simulator/\nPilestone Colorblindness Simulator: https://pilestone.com/pages/color-blindness-simulator-1\nVischeck http://www.vischeck.com/vischeck/vischeckImage.php"
  },
  {
    "objectID": "resources/dataviz_tools.html#books",
    "href": "resources/dataviz_tools.html#books",
    "title": "Tools for Data Visualization",
    "section": "Books",
    "text": "Books\n\nClaus Wilke, Fundamentals of Data Visualization https://clauswilke.com/dataviz/\nhttps://www.bigbookofr.com/data-visualization.html\nhttps://handsondataviz.org/"
  },
  {
    "objectID": "resources/dataviztools.html#websites",
    "href": "resources/dataviztools.html#websites",
    "title": "Tools for Data Visualization",
    "section": "Websites",
    "text": "Websites\n\nPractice Coding in R on Posit Cloud\n\nhttps://posit.cloud/learn/primers/\n\n\n\nColor Codes\n\nHTML colors: https://htmlcolorcodes.com/\n\n\n\nVisualize a palette for different types of colorblindness\n\nViz Palette https://projects.susielu.com/viz-palette\n\n\n\nWhat do your photos/images look like to others?\n\nCoblis colorblindness imulator: https://www.color-blindness.com/coblis-color-blindness-simulator/\nPilestone Colorblindness Simulator: https://pilestone.com/pages/color-blindness-simulator-1\nVischeck http://www.vischeck.com/vischeck/vischeckImage.php"
  },
  {
    "objectID": "resources/dataviztools.html#books",
    "href": "resources/dataviztools.html#books",
    "title": "Tools for Data Visualization",
    "section": "Books",
    "text": "Books\n\nClaus Wilke, Fundamentals of Data Visualization https://clauswilke.com/dataviz/\nhttps://www.bigbookofr.com/data-visualization.html\nhttps://handsondataviz.org/"
  },
  {
    "objectID": "slides/0x-title_edit.html",
    "href": "slides/0x-title_edit.html",
    "title": "rmatch(slide_name, slide_order)` . How R and RStudio Work",
    "section": "",
    "text": "#source(here::here(\"R\", \"_common.R\"))\n# from source\nslide_order &lt;- c(\"02-content.qmd\", \"01-content.qmd\")\n\nslide_name &lt;- basename(this.path::this.path())\nslide_name &lt;- \"02-content.qmd\"\n\ntesting"
  },
  {
    "objectID": "slides/bar_plots.html#fragments",
    "href": "slides/bar_plots.html#fragments",
    "title": "Data Visualizations using ggplot",
    "section": "Fragments",
    "text": "Fragments\n\nFade in\n\n\nFade out\n\n\nHighlight red\n\n\nFade in, then out"
  },
  {
    "objectID": "slides/bar_plots.html#fragments-nesting",
    "href": "slides/bar_plots.html#fragments-nesting",
    "title": "Data Visualizations using ggplot",
    "section": "Fragments, nesting",
    "text": "Fragments, nesting\n\n\n\nFade in &gt; Turn red &gt; Semi fade out"
  },
  {
    "objectID": "slides/bar_plots.html#fragments-spans",
    "href": "slides/bar_plots.html#fragments-spans",
    "title": "Data Visualizations using ggplot",
    "section": "Fragments, spans",
    "text": "Fragments, spans\n\nHighlight this important part.\nFade in that."
  },
  {
    "objectID": "slides/bar_plots.html#plot-elements",
    "href": "slides/bar_plots.html#plot-elements",
    "title": "Data Visualizations using ggplot",
    "section": "Plot Elements",
    "text": "Plot Elements\n\n\na geometric object, geom_*()\na statistic, stat_*()\na coordinate system, coord_*()\na theme, coord_*()\na facet, facet_*()\nlabels, labs(), lable_*()\na facet legend or guide, guide_*()\na scale, scale_*()\nannotations, annotation_*()"
  },
  {
    "objectID": "slides/bar_plots.html#example-geoms-e.g.-geom_",
    "href": "slides/bar_plots.html#example-geoms-e.g.-geom_",
    "title": "Data Visualizations using ggplot",
    "section": "Example Geoms (e.g., geom_*)",
    "text": "Example Geoms (e.g., geom_*)\n\n\ngeom_histogram() & geom_density()\ngeom_bar()\ngeom_col()\ngeom_line()\ngeom_boxplot()\ngeom_point() for scatteplots\nStatistic"
  },
  {
    "objectID": "slides/bar_plots.html#load-the-library",
    "href": "slides/bar_plots.html#load-the-library",
    "title": "Data Visualizations using ggplot",
    "section": "Load the library",
    "text": "Load the library\nlibrary(ggplot)"
  },
  {
    "objectID": "slides/bar_plots.html#create-the-plot-object",
    "href": "slides/bar_plots.html#create-the-plot-object",
    "title": "Data Visualizations using ggplot",
    "section": "Create the plot object",
    "text": "Create the plot object\n#"
  },
  {
    "objectID": "slides/bar_plots.html#add-layers",
    "href": "slides/bar_plots.html#add-layers",
    "title": "Data Visualizations using ggplot",
    "section": "Add layers",
    "text": "Add layers\nlibrary(ggplot)"
  },
  {
    "objectID": "slides/bar_plots.html#bar-plots-with-geom_bar",
    "href": "slides/bar_plots.html#bar-plots-with-geom_bar",
    "title": "Data Visualizations using ggplot",
    "section": "Bar plots with geom_bar()",
    "text": "Bar plots with geom_bar()\n\nare this\nare that"
  },
  {
    "objectID": "slides/bar_plots.html#facet_wrap-and-facet_grid",
    "href": "slides/bar_plots.html#facet_wrap-and-facet_grid",
    "title": "Data Visualizations using ggplot",
    "section": "facet_wrap() and facet_grid()",
    "text": "facet_wrap() and facet_grid()\n\nidentify the grouping variable(s)\nfacet_wrap() for a single grouping by row or col\n\nfacet_wrap(facets = ~my_grouping_variable)\n\nfacet_grid() for two groupsing vars, row and col\n\nfacet_grid(facets = my_grouping_variableA ~ my_grouping_variableB)\n\n\nNote: The ~ does not precede the first grouping var in facet_grid()."
  },
  {
    "objectID": "slides/bar_plots.html#horizontal-or-vertical-orientation",
    "href": "slides/bar_plots.html#horizontal-or-vertical-orientation",
    "title": "Data Visualizations using ggplot",
    "section": "Horizontal or Vertical Orientation",
    "text": "Horizontal or Vertical Orientation\n\ndir = 'h' (default)\ndir = 'v' (vertical/cols)"
  },
  {
    "objectID": "slides/bar_plots.html#legend-label-position-orientation",
    "href": "slides/bar_plots.html#legend-label-position-orientation",
    "title": "Data Visualizations using ggplot",
    "section": "Legend label Position Orientation",
    "text": "Legend label Position Orientation\n\nstrip.position = 'top'\nstrip.position = 'bottom'\nstrip.position = 'left'\nstrip.position = 'right'"
  },
  {
    "objectID": "slides/bar_plots.html#x-or-y-legend-position",
    "href": "slides/bar_plots.html#x-or-y-legend-position",
    "title": "Data Visualizations using ggplot",
    "section": "x or y legend position",
    "text": "x or y legend position\n\nswitch = 'x' or switch = 'y'\n\nlibrary(ggplot2)\nggplot(mtcars, aes(x=mpg,y=wt)) +   \n  geom_point() +\n  facet_grid(facets = ~cyl,\n             switch = 'x'\n             )"
  },
  {
    "objectID": "slides/index.html",
    "href": "slides/index.html",
    "title": "Slides",
    "section": "",
    "text": "Maybe link to slides or make a dropdown"
  },
  {
    "objectID": "slides/sample_pres.html#step-1",
    "href": "slides/sample_pres.html#step-1",
    "title": "The Presentation",
    "section": "Step 1",
    "text": "Step 1\n\nSplit slides up with level 2 headers: ## Heading 2\nAdd some markdown + text and/or some R/Python code"
  },
  {
    "objectID": "slides/sample_pres.html#some-r-code",
    "href": "slides/sample_pres.html#some-r-code",
    "title": "The Presentation",
    "section": "Some R Code",
    "text": "Some R Code\n\n2 + 2\n\n[1] 4\n\n# comment"
  },
  {
    "objectID": "slides/sample_pres.html#slide-title",
    "href": "slides/sample_pres.html#slide-title",
    "title": "The Presentation",
    "section": "Slide Title",
    "text": "Slide Title\n\none\ntwo"
  },
  {
    "objectID": "slides/sample_pres.html#make-this-slide-red",
    "href": "slides/sample_pres.html#make-this-slide-red",
    "title": "The Presentation",
    "section": "Make this slide Red",
    "text": "Make this slide Red"
  },
  {
    "objectID": "slides/sample_pres.html#making-a-slide-incremental",
    "href": "slides/sample_pres.html#making-a-slide-incremental",
    "title": "The Presentation",
    "section": "Making a Slide Incremental",
    "text": "Making a Slide Incremental\nSay you want to reveal the content of slide piecemeal without rewriting separate slides with previous content.\n\nThen add some content…\n\n\nThen some more content"
  },
  {
    "objectID": "slides/sample_pres.html#omit-this-slide-visibility-hidden",
    "href": "slides/sample_pres.html#omit-this-slide-visibility-hidden",
    "title": "The Presentation",
    "section": "Omit This Slide {visibility = “hidden”}",
    "text": "Omit This Slide {visibility = “hidden”}"
  },
  {
    "objectID": "slides/sample_pres.html#add-links",
    "href": "slides/sample_pres.html#add-links",
    "title": "The Presentation",
    "section": "Add links",
    "text": "Add links\n\ncmc\n\n\n\nFirst item\nSecond item"
  },
  {
    "objectID": "slides/sample_pres.html#fragments",
    "href": "slides/sample_pres.html#fragments",
    "title": "The Presentation",
    "section": "Fragments",
    "text": "Fragments\n\nFade in\n\n\nFade out\n\n\nHighlight red\n\n\nFade in, then out"
  },
  {
    "objectID": "slides/sample_pres.html#fragments-nesting",
    "href": "slides/sample_pres.html#fragments-nesting",
    "title": "The Presentation",
    "section": "Fragments, nesting",
    "text": "Fragments, nesting\n\n\n\nFade in &gt; Turn red &gt; Semi fade out"
  },
  {
    "objectID": "slides/sample_pres.html#fragments-spans",
    "href": "slides/sample_pres.html#fragments-spans",
    "title": "The Presentation",
    "section": "Fragments, spans",
    "text": "Fragments, spans\nThis is an important sentence!\nMind the gap when riding the rail!"
  },
  {
    "objectID": "slides/sample_pres.html#column-layout",
    "href": "slides/sample_pres.html#column-layout",
    "title": "The Presentation",
    "section": "Column layout",
    "text": "Column layout\n\n\ncontents…s\n\ncontents…"
  },
  {
    "objectID": "slides/sample_pres.html#output-location",
    "href": "slides/sample_pres.html#output-location",
    "title": "The Presentation",
    "section": "Output Location",
    "text": "Output Location\n\n\nlibrary(ggplot2)\n\nmtcars |&gt; \n  ggplot(aes(x = disp, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", formula = \"y~x\")"
  },
  {
    "objectID": "slides/slide_page.html",
    "href": "slides/slide_page.html",
    "title": "slide page",
    "section": "",
    "text": "We need a few libraries for file management, data frame manipulation, and plotting.\n\n#library(flipbookr)\nlibrary(here)\n\nhere() starts at C:/Users/gcook/Sync/git/dataviz23\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "slides/slide_page.html#loading-libraries",
    "href": "slides/slide_page.html#loading-libraries",
    "title": "slide page",
    "section": "",
    "text": "We need a few libraries for file management, data frame manipulation, and plotting.\n\n#library(flipbookr)\nlibrary(here)\n\nhere() starts at C:/Users/gcook/Sync/git/dataviz23\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "slides/slide_page.html#new",
    "href": "slides/slide_page.html#new",
    "title": "slide page",
    "section": "New",
    "text": "New\nNotes"
  },
  {
    "objectID": "slides/slide_page.html#code",
    "href": "slides/slide_page.html#code",
    "title": "slide page",
    "section": "Code",
    "text": "Code\n{r}\n2 + 3"
  },
  {
    "objectID": "syllabus/syllabus.html",
    "href": "syllabus/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Under construction\n\n\n\nThis syllabus is under construction until Fall 2023\nSemester\nFall 2023\n\n\nSection\nPSYC 167, Sect-01\n\n\nDay Time\nTuesday 2:45 - 05:30PM (Pacific)\n\n\nLocation\nLocation: Roberts South, 104\n\n\nOffice Hours\n(zoom link posted on …)\n\n\nInstructor\nGabriel I. Cook\n\n\nContact\nEmail: gcook@CMC.edu(please put ’PSYC 167 in subject line)\n\n\nCredit\n3 hours; 1 credits"
  },
  {
    "objectID": "syllabus/syllabus.html#course-description",
    "href": "syllabus/syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nData visualization is the science and art of creating graphical representations of information and data. Visual representations provide accessible ways to see patterns, trends, and outliers in data. Variables like position, size, and orientation can focus attention and guide perception but can also bias interpretation of data. Students will learn how well-designed visualizations can reduce bias and improve comprehension for data thereby facilitating data-driven decision-making. Students will explore techniques for creating effective visualizations based on principles from cognitive and perceptual psychology, art, and design. Students will gain hands-on experience coding real-world data visualizations for local offices, organizations, and industry participants.\nThe course is targeted toward students with expressed interest in cognition and cognitive biases related to data communication, students interested in using visualization to communicate their own messages, and students interested in creating better visualization tools and systems. Students will engage in discussions of the readings, complete programming and data analysis assignments, and prepare a final project involving storytelling with data visualizations.\nPrerequisite: For data-science sequence or majors (level-A data-science course); recommended a course in Perception, Visual Attention, Cognitive Psychology, or Cognitive Science; or permission of instructor\n\nCourse Specific Learning Goals\n\nUnderstand various uses of visual variables to create data visualizations;\nUnderstand both advantages and disadvantages of using visual variables to create data visualizations;\nAnalyze, critique, and revise data visualizations;\nUnderstand the functionality of the ggplot2 library for creating data visualizations;\nPresent data with visual representations for your target audience, task, and data;\nIdentify appropriate data visualization techniques given particular requirements imposed by the data and/or audience; and\nApply appropriate design principles in the creation of presentations and visualizations"
  },
  {
    "objectID": "syllabus/syllabus.html#courses-at-cmc",
    "href": "syllabus/syllabus.html#courses-at-cmc",
    "title": "Syllabus",
    "section": "Courses at CMC",
    "text": "Courses at CMC\n\nFaculty Handbook 5.4.2 Work Load in Classes\n“Courses should involve approximately equal workloads. Generally, students should expect to spend from 6 to 8 hours per week, over and above the time spent in classroom, on each course.” – CMC Faculty Handbook\nIf you do the math, including class time of 2½ hours, you should expect to allocate 8 ½ to 10 ½ hours per week for courses at CMC. “Per week” is a key phrase; courses are not designed for nondistributed cramming."
  },
  {
    "objectID": "syllabus/syllabus.html#course-materials-and-textbook",
    "href": "syllabus/syllabus.html#course-materials-and-textbook",
    "title": "Syllabus",
    "section": "Course Materials and Textbook",
    "text": "Course Materials and Textbook\nAll of the course materials will be available on this course website .\nLink to the course website: https://slicesofdata.github.io/dataviz23\n\nRequired Equipment:\nComputer: current Mac (macOS) or PC (Windows or Linux) with high-speed internet connection, capable of running R and RStudio\n\n\nRequired Software:\nR and RStudio: Students will be required to use R and RStudio software. Note: Install Version will be provided. Before installing RStudio, you must also download and install the base R software at https://www.r-project.org/ that is appropriate for your computer’s operating system. RStudio can be downloaded for free at https://www.rstudio.com. You are expected to install R and RStudio on your personal computer by downloading the software from the links above. You will also have to install appropriate libraries throughout the course. Further instructions will be provided.\n\n\nReading Materials/Textbook(s)\nReadings will be taken from different sources and will appear in each topic module.\n\nWickham, H., Navarro. D., & Pedersen, T. L.. ggplot2: Elegant Graphics for Data Analysis, 3rd ed.\nClaus O. Wilke (2019). Fundamentals of Data Visualization. O'Reilly Media.\nXie, Y., Allaire, J. J., & Grolemund, G. R Markdown: The Definitive Guide\nKieran Healy (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nNordmann, E. & DeBruine, L. (2023). Applied Data Skills: Processing & Presenting Data (2023) . https://psyteachr.github.io/ads-v2\n\nThese textbooks are free and open-source."
  },
  {
    "objectID": "syllabus/syllabus.html#course-structure",
    "href": "syllabus/syllabus.html#course-structure",
    "title": "Syllabus",
    "section": "Course Structure",
    "text": "Course Structure\nStudents are expected to participate in all aspects of the class. This class involves developing topic knowledge and computer programming skills for visualizing data. The assumption is that students possess varying levels of skills related to programming. Class time will be spend engaging in a variety of tasks and activities, including lectures, group-work, applied coding activities, presentations, and discussions."
  },
  {
    "objectID": "syllabus/syllabus.html#course-schedule",
    "href": "syllabus/syllabus.html#course-schedule",
    "title": "Syllabus",
    "section": "Course Schedule",
    "text": "Course Schedule\n\n\n\n\n\n\n\n\n\n\nDate\nModule\nTopic\n\n\n\n\n29-Aug\n1\nIntroduction, Project Management\n\n\n\n2\nGraphical Perception\n\n\n5-Sep\n3\nData Frame Manipulation and Wrangling\n\n\n\n4\nData Subsets and Summaries\n\n\n12-Sep\n5\nThe Grammar of Graphics\n\n\n\n6\n\n\n\n19-Sep\n7\nVisualizing Amounts\n\n\n\n8\nSpatial Position and Adjustment\n\n\n26-Sep\n9\nConsiderations in Data Visualization\n\n\n\n10\nVisualizing Associations\n\n\n3-Oct\n11\nColor Scales and Palettes\n\n\n\n12\nStatistical Transformations: Data as-is Versus Summaries\n\n\n10-Oct\n13\nCoordinates, Axes, and Position Scales\n\n\n\n14\nHistograms and Density Plots\n\n\n17-Oct\n15\nFall Break (no class)\n\n\n\n16\n\n\n\n24-Oct\n17\nVisualizing More Distributions\n\n\n\n18\nVisualizing Uncertainty\n\n\n31-Oct\n19\nVisualizing Trends\n\n\n\n20\nLegends and Arrangement\n\n\n7-Nov\n21\nAnnotation and Text\n\n\n\n22\n\n\n\n14-Nov\n23\n\n\n\n\n24\nDesigning Perceptually Efficient Visualizations\n\n\n21-Nov\n25\nAttentional Control\n\n\n\n26\nMulti-Panel Plots: Faceting and Layers\n\n\n28-Nov\n27\nProject Week\n\n\n\n28\nTelling a story\n\n\n8-Dec\n29\nPresentation (Last day of Instruction)"
  },
  {
    "objectID": "syllabus/syllabus.html#assignments-and-grading",
    "href": "syllabus/syllabus.html#assignments-and-grading",
    "title": "Syllabus",
    "section": "Assignments and Grading",
    "text": "Assignments and Grading\nThis is an engagement and skills-acquisition based course. At the beginning of the course and throughout, students will be given instruction on building and maintaining a website using quarto and github pages. Each week students will contribute blog posts and other content to their websites in response to module assignments. Students will be expected to submit URL links to their blogs using Blackboard. Students are expected to attend and participate in each class. The final project includes conducting, communicating, and preserving a reproducible data analysis project.\n\nEvaluation and Grading:\n\n\n\n\n\nItem\nTotal Points\nInstance\n\n\n\n\nConceptual Assignment\n20\n?10\n\n\nCoding Assignment\n30\n?10\n\n\nMidterm Presentation\n20\n1\n\n\nFinal Project\n30\n1\n\n\n\n\n\nPercentage grades are converted to letter grades according to the following rubric.\n\n\n\n\n\nLetter\nPoint Range\n\n\n\n\nA\n94 - 100\n\n\nA-\n90 - 93.99\n\n\nB+\n87 - 89.99\n\n\nB\n84 - 86.99\n\n\nB-\n80 - 83.99\n\n\nC+\n77 - 79.99\n\n\nC\n74 - 76.99\n\n\nC-\n70 - 73.99\n\n\nD+\n67 - 69.99\n\n\nD\n64 - 66.99\n\n\nD-\n60 - 63.99\n\n\nF\n0 - 59.99"
  },
  {
    "objectID": "syllabus/syllabus.html#attendance",
    "href": "syllabus/syllabus.html#attendance",
    "title": "Syllabus",
    "section": "Attendance",
    "text": "Attendance\nStudents are expected to attend and participate in each class."
  },
  {
    "objectID": "syllabus/syllabus.html#course-policies",
    "href": "syllabus/syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\n\nDue dates\nDue dates are suggestions for completing coursework on a weekly basis. You may be able to work ahead, but you are not encouraged to fall behind.\nYou should email me if you have an exceptional circumstance preventing you from taking an assessment during an assessment week.\n\n\nChanges to the syllabus\nThe syllabus may be updated for clarity or to make adjustments for pedagogical purposes. The most current version of the syllabus is always available from the course website.\n\n\nAccessibility\nIn order to receive disability-related academic accommodations students must first be registered with the Center for Student Disability Services. Students who have a documented disability or suspect they may have a disability are invited to set up an appointment with the Director of the Center for Student Disability Services, at 718-951-5538. If you have already registered with the Center for Student Disability Services, please provide your professor with the course accommodation form and discuss your specific accommodation with him/her.\n\n\n\nEmail Correspondence\nI will regularly use e-mail and will use Canvas to send out announcements, changes in the syllabus, reminders about assessments or due dates etc. You are responsible for checking e-mail regularly to keep up-to-date with these announcements. I will use the e-mail address you have listed with the College. Therefore, please make sure that this is indeed the correct address.\nIf you have questions please email me:\n\nAlways add ’PSYC 167” to the subject line\nemail me at: gcook@cmc.edu"
  },
  {
    "objectID": "syllabus/syllabus.html#universitys-policy-on-academic-integrity",
    "href": "syllabus/syllabus.html#universitys-policy-on-academic-integrity",
    "title": "Syllabus",
    "section": "University’s policy on Academic Integrity",
    "text": "University’s policy on Academic Integrity\nThe faculty and administration of Claremont McKenna College support an environment free from cheating and plagiarism. Each student is responsible for being aware of what constitutes cheating and plagiarism and for avoiding both.\n\nViolations of Academic integrity\nEach student is responsible for understanding and acting in accordance with the College’s policy on Academic Integrity, described below.\n\n\nAcademic Integrity\nAlthough you may find yourself working on assignments with a partner or discussing them with classmates, all assignments should be your one original work. You are not to share materials with other students if that material has the potential of being copied, even if your intention is not to allow a classmate to copy your work. Any signs of academic dishonesty, even those raised by concerned peers, will be submitted to the Academic Standards Committee for review. Although I do not anticipate any events of academic dishonesty, any form of dishonestly of any form will not be tolerated. Many students are unclear of the definition of plagiarism so I have posted some CMC links to information that I believe will clarify the issue. In addition, any work completed for another course, past or present, may not be submitted for a grade for this course and would be a violation of integrity. http://registrar.academic.claremontmckenna.edu/acpolicy/default.asp\n\nStatement of Reasonable Accommodations\nYour experience in this class is important to me. If you have already established accommodations with Disability & Accessibility Services at CMC, please communicate your approved accommodations to me during the first week of the semester so we can discuss your needs in this course ASAP. You can start this conversation by forwarding me your accommodation letter. If you have not yet established accommodations through Accessibility Services but have a temporary health condition or permanent disability (conditions include but are not limited to: mental health, attention-related, learning, vision, hearing, physical or health), you are encouraged to contact Assistant Dean for Disability Services & Academic Success, Kari Rood, at AccessibilityServices@cmc.edu to ask questions and/or begin the process. General information and accommodations request information be found at the CMC DOS Accessibility Service’s website. Please note that arrangements must be made with advance notice in order to access the reasonable accommodations. You are able to request accommodations from CMC Accessibility Services at any point in the semester. Be mindful that this process may take some time to complete and accommodations are not retroactive. I would err on the side of caution and make sure your accommodations are sent to me even if you do not believe you need them as some students only learn they may need time after completing assessment. The Americans With Disabilities Act (ADA) and Section 504 of the Rehabilitation Act do not make accommodations retroactive. If you are approved for extra testing time for example, you must do so before an electronic assessment is posted in order for it to be integrated into the assessment. Claremont McKenna College values creating inclusive and accessible learning environments consistent with federal and state law. If you are not a CMC student, please connect with the Disability & Accessibility Services Coordinator on your campus regarding a similar process.\n\n\n\nFYI on cheating etc.\nRemember, you are responsible for not cheating or violating CMC’s Academic Integrity Policy. You are responsible for understanding that policy, and for conducting yourself in a manner such that you do not violate the policy.\nThe above link lists many examples of cheating and plagiarism that are not allowed. There are many more specific acts that you should NOT do. Here is an additional list of activities that will be sufficient cause for immediate failure in the course.\n\nDo not take pictures of exam or quiz questions and share them with other students\nDo not give other students answers during an exam or quiz, or any other assignment that is an individual assignment\nDo not copy work from another source and submit it as your own\nDo not copy and paste text from the internet and submit it as your own words\nDo not copy and paste text and slightly alter wording to pass the work off as your own\nDo not hire someone else to do the coursework for you\nDo not copy and paste text into a paraphrasing app, and then submit the output of the paraphrasing app as your own work\nDo not copy random words from the internet that have nothing to do with the assignment and submit them as your own work.\nDo not work on individual assignments with other students, share answers or other material, and then all hand in versions of the same thing that are slightly different.\nDo not plagiarize yourself by submitting work that you have previously completed in another class.\n\n\n\nMandate to report violations\nIf a faculty member suspects a violation of academic integrity and, upon investigation, confirms that violation, or if the student admits the violation, the faculty member MUST report the violation. Students should be aware that faculty may use plagiarism detection software.\nThere is no excuse for cheating. Students who are caught cheating may receive a failing grade for the entire course. All students who violate the academic integrity will receive a Faculty Action Report, which will go on their personal file at the Academic Integrity Office."
  },
  {
    "objectID": "syllabus/syllabus.html#faq",
    "href": "syllabus/syllabus.html#faq",
    "title": "Syllabus",
    "section": "FAQ",
    "text": "FAQ\nIf you have questions about the syllabus, let’s talk about it in class, and/or please create a thread to discuss the question on the discussion board for this course on Blackboard."
  },
  {
    "objectID": "modules/06a_reading_data_files.html",
    "href": "modules/06a_reading_data_files.html",
    "title": "Reading data files",
    "section": "",
    "text": "{readxl}: for reading Excel spreadsheets\n{readr}: for reading .csv, .tsv, and .fwf files"
  },
  {
    "objectID": "modules/06a_reading_data_files.html#libraries",
    "href": "modules/06a_reading_data_files.html#libraries",
    "title": "Reading data files",
    "section": "",
    "text": "{readxl}: for reading Excel spreadsheets\n{readr}: for reading .csv, .tsv, and .fwf files"
  },
  {
    "objectID": "modules/06a_reading_data_files.html#reading-excel-spreadsheets-with-readxl",
    "href": "modules/06a_reading_data_files.html#reading-excel-spreadsheets-with-readxl",
    "title": "Reading data files",
    "section": "Reading Excel Spreadsheets with {readxl}",
    "text": "Reading Excel Spreadsheets with {readxl}\nWe will use the {readxl} library to handing reading of Excel files. Because Excel files can contain multiple sheets, one goal would be to find out the sheet names using readxl::excel_sheets (see ?readxl::excel_sheets). This function takes one argument, which is the path to the file. Passing the path will return the sheet names in that file. We can pass the path string directly into the function or if the file path is already saved as a object, pass that. In both cases, let’s save it as\nIn order to read an Excel spreadsheet file, you will need to specify at very least file and if you want to read a specific sheet other than the first one, then you will need to specify sheet.\n\nfile: a path to the file,\nsheet: the sheet name to read\n\n\nGetting Sheet Names\n\nreadxl::excel_sheets(path = here::here(\"data\", \"cms-top-all-time-2023-swim.xlsx\"))\n\n[1] \"diving\" \"swim\"   \"relay\" \n\nfile &lt;- here::here(\"data\", \"cms-top-all-time-2023-swim.xlsx\")\n\nreadxl::excel_sheets(path = file)\n\n[1] \"diving\" \"swim\"   \"relay\" \n\n\nGreat, we know know the sheet names. The benefit of passing an object is that you you may wish to pass the path to another function, for example, to read a sheet from the file.\n\n\nReading a Sheet\nIn order to read a sheet, we will use readxl::read_excel(), which takes the file path as the first argument and the name of the desired sheet as the second argument. You might get away with passing only the path as long as your goal is to read the first sheet because this is the default action. Let’s wrap the function in head() to see the top.\n\nhead(\n  readxl::read_excel(file)\n)\n\n# A tibble: 6 × 4\n  score  name              year  event         \n  &lt;chr&gt;  &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;         \n1 525.35 Maia Presti       2015  1-Meter Diving\n2 514.70 Makenna Parkinson 2023  1-Meter Diving\n3 512.05 Emma Ng Pack      2023  1-Meter Diving\n4 494.95 Izzy Doud         2023  1-Meter Diving\n5 462.15 Carli Lessard     2015  1-Meter Diving\n6 447.70 Alexis Romero     2023  1-Meter Diving\n\n\nThe function also turns the file content into a data frame composed of row and column data. Luckily we have a clean file and nothing too messy. You can verify using R’s built-in function is.data.frame(), which will return TRUE if it’s a data frame or FALSE if not. We will assign this to an object\n\nis.data.frame(readxl::read_excel(file))\n\n[1] TRUE\n\n\nBut we don’t want the first sheet. Pass sheet = \"swim\" to read that sheet. Also, let’s read in the data and assign it to an object called DAT which will hold the data frame.\n\nDAT &lt;- readxl::read_excel(file, sheet = \"swim\")\n\nAnother way to read data files is using either {vroom}, which is extremely fast for reading large files (see docs for why it’s so awesome), or using {dplyr} library that is part of the {tidyverse}. {dplyr}, however, does not handle Excel files. In order to demonstrate how to use {readr}, we can save the data frame as a .csv file."
  },
  {
    "objectID": "modules/06a_reading_data_files.html#writing-data-files",
    "href": "modules/06a_reading_data_files.html#writing-data-files",
    "title": "Reading data files",
    "section": "Writing Data Files",
    "text": "Writing Data Files\nDespite it’s name, {readr} can save data frames too. Interestingly, at least at the time of this writing, {readr} allows you to write files in excel format even though you cannot open them.\nMoving forward, you can save the data frame as a .csv file using readr::write_csv(). When writing a file using write_csv() we need to specify key arguments: x, the data frame object and file, the file name. You do not need to set a delimiter because, given its name, .csv defaults the separation as a comma \",\". Other arguments may be necessary for other files and goals.\nIf, however, you specify name of the file (e.g., \"my file name.csv\"), the data frame will be written to a default location because no file path was provided. Um, so where is that default location? Well it depends and it’s complicated depending on whether files are .R or .Rmd. By default, .Rmd files will assume the directory from which the .Rmd file, NOT THE DATA FILE, is opened. But you don’t want to save a data file to the directory where your code lives.\nIf you are organized, you save your .R and .Rmd files in code directory and your data files in a data directory. So yeah, the default is a problem. The solution is to specify the file path using file = the file path.\nWhat’s the best way? The easiest/best way is with the {here} library, assuming of course you are smart enough to be using projects in RStudio. When you open a file from within a project, {here} will make the project directory the working directory. And if you are organized, your data files will be in a /data directory inside the project directory. When passing \"data\" as the first argument to here::here() ( e.g., here::here(\"data\"), you will see that the function returns a string containing the full path to the project directory plus the data subdirectory.\n\nhere::here(\"data\")\n\n[1] \"C:/Users/gcook/Sync/git/dataviz23/data\""
  },
  {
    "objectID": "modules/06a_reading_data_files.html#a-workflow-side-note-on-strings",
    "href": "modules/06a_reading_data_files.html#a-workflow-side-note-on-strings",
    "title": "Reading data files",
    "section": "A Workflow Side Note on Strings",
    "text": "A Workflow Side Note on Strings\nYou could avoid hard coding the change of the file extension in order to streamline you workflow. Every time to pass the path and the path changes you will need to change this by hand and doing so could be extremely annoying. For example, if you change the save location or the file name, you’ll need to make updates for all code referencing the path. To avoid potential headaches, we can instead use gsub() to examine a string, look for a pattern, and replace that pattern with another pattern. All we want to do is to change \".xlsx\" or \".xls\" in the string to \".csv\". And because we will next want to use this new name for reading later, let’s assign the change to a new string object, file_csv.\nFirst, let’s see what gsub() is doing.\n\ngsub(pattern = \".xlsx|.xls\",  \n     replacement = \".csv\", \n     x = file\n     )\n\n[1] \"C:/Users/gcook/Sync/git/dataviz23/data/cms-top-all-time-2023-swim.csv\"\n\n\nAssign to an object:\n\nfile_csv &lt;- gsub(\".xlsx|.xls\", \".csv\", file)\n\nSecond, pass the path object to write_csv():\n\nreadr::write_csv(x = DAT, \n                 file = file_csv\n                 )\n\nDid it save? Use file.exists().\n\nfile.exists(file_csv)\n\n[1] TRUE\n\n\nRemember, all we have done is saved the data frame. This new file will contain only the data from the spreadsheet that we read earlier. Before opening this new file, we need to take a detour on general handling of reading files with {readr}."
  },
  {
    "objectID": "modules/06a_reading_data_files.html#reading-a-.csv-file-stored-on-a-website",
    "href": "modules/06a_reading_data_files.html#reading-a-.csv-file-stored-on-a-website",
    "title": "Reading data files",
    "section": "Reading a .csv File Stored on a Website",
    "text": "Reading a .csv File Stored on a Website\nFor example, although the mtcars data is also a built-in data set in R, if it were a read actual .csv file save on some website, you can pass the URL path as the file. This file does exist on the {tidyverse} github for {readr}.\n\nreadr::read_csv(file = \"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nBecause file if the first argument of the function, you do not need to reference it specifically. Doing so just eliminates ambiguity for more complicated function calls. You will come across a lot of examples of code that do NOT reference the arguments by name.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nBy default, readr::read_csv() tries to guess whether column/variable names are present. If you know they exist, you can set col_names = TRUE.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = T)\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nIf the names are present and you set col_names = FALSE, you will get a mess because {readr} will assume the header row is data just as the rest of the file.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = F)\n\nRows: 33 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 33 × 11\n   X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11  \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 mpg   cyl   disp  hp    drat  wt    qsec  vs    am    gear  carb \n 2 21    6     160   110   3.9   2.62  16.46 0     1     4     4    \n 3 21    6     160   110   3.9   2.875 17.02 0     1     4     4    \n 4 22.8  4     108   93    3.85  2.32  18.61 1     1     4     1    \n 5 21.4  6     258   110   3.08  3.215 19.44 1     0     3     1    \n 6 18.7  8     360   175   3.15  3.44  17.02 0     0     3     2    \n 7 18.1  6     225   105   2.76  3.46  20.22 1     0     3     1    \n 8 14.3  8     360   245   3.21  3.57  15.84 0     0     3     4    \n 9 24.4  4     146.7 62    3.69  3.19  20    1     0     4     2    \n10 22.8  4     140.8 95    3.92  3.15  22.9  1     0     4     2    \n# ℹ 23 more rows\n\n\nAs you can see, the column names are all prefixed with “X” and the first row is now the name of the headers. names() or colnames() will return the column names, so we can apply it and see what happens. We will wrap readr::read_csv() in names(). See how this is a problem. You can use colnames() to test this too.\n\nnames(\n  readr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = T)\n  )\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\""
  },
  {
    "objectID": "modules/06a_reading_data_files.html#reading-a-.csv-file-stored-locally-on-your-computer",
    "href": "modules/06a_reading_data_files.html#reading-a-.csv-file-stored-locally-on-your-computer",
    "title": "Reading data files",
    "section": "Reading a .csv File Stored Locally on your Computer",
    "text": "Reading a .csv File Stored Locally on your Computer\nIf a file actually existed on your computer, the file would not be a URL but rather the path location to where the file is stored.\nAnd now we can read the locale file as before except we are not passing the string name but rather an object (e.g., my_local_csv) holding the file path and file name. Voilà.\n\nreadr::read_csv(file_csv)\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   time  name              year event  \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows"
  },
  {
    "objectID": "modules/06a_reading_data_files.html#reading-raw-data-that-is-comma-separated-e.g.-.csv",
    "href": "modules/06a_reading_data_files.html#reading-raw-data-that-is-comma-separated-e.g.-.csv",
    "title": "Reading data files",
    "section": "Reading Raw Data that is Comma-Separated (e.g., .csv)",
    "text": "Reading Raw Data that is Comma-Separated (e.g., .csv)\nWe will file use readr::read_csv() to read our data file.\n\nreadr::read_csv(file_csv)\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   time  name              year event  \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows\n\n\nIf there were only data in the file and no names representing variables on the first row, the file might look like that below. We can imitate this by skipping the first row (containing names) using skip =.\n\nreadr::read_csv(file_csv, skip = 1)\n\nRows: 209 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): 23.29, Jocelyn Crawford, 50 FREE\ndbl (1): 2019\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 209 × 4\n   `23.29` `Jocelyn Crawford` `2019` `50 FREE`\n   &lt;chr&gt;   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;    \n 1 23.31   Ava Sealander        2022 50 FREE  \n 2 23.49   Kelly Ngo            2016 50 FREE  \n 3 23.71   Helen Liu            2014 50 FREE  \n 4 23.76   Michele Kee          2014 50 FREE  \n 5 23.77   Natalia Orbach-M     2020 50 FREE  \n 6 23.77   Suzia Starzyk        2020 50 FREE  \n 7 23.87   Katie Bilotti        2010 50 FREE  \n 8 23.93   Jenni Rinker         2011 50 FREE  \n 9 24.02   Annika Sharma        2023 50 FREE  \n10 51.05   Kelly Ngo            2016 100 FREE \n# ℹ 199 more rows\n\n\nSee how the first row is assumed to be names? Setting col_names = F will fix the problem. Putting the arguments on separate rows of R code might improve code legibility.\n\nreadr::read_csv(file_csv, \n                skip = 1,\n                col_names = F\n                )\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): X1, X2, X4\ndbl (1): X3\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   X1    X2                  X3 X4     \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows\n\n\nBut we have no column names now. Setting col_names = will fix that. Use c() to combine 4 names, e.g., col_names = c(\"name1\", \"name2\", \"name3\", \"name4\").\n\nreadr::read_csv(file_csv, \n                skip = 1,\n                col_names = c(\"time\", \"name\", \"year\", \"event\")\n                )\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   time  name              year event  \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows\n\n\nLuckily, we have both names and data in the file and by default readr::read_csv() does what we intend."
  },
  {
    "objectID": "modules/06a_reading_data_files.html#data-from-a-librarypackage",
    "href": "modules/06a_reading_data_files.html#data-from-a-librarypackage",
    "title": "Reading data files",
    "section": "Data from a Library/Package",
    "text": "Data from a Library/Package\nAs mentioned earlier, mtcars is a data set on cars which is also part of base R, meaning you do not need to read it from anyplace. R does this automatically.\n\nprint(mtcars)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n# or \nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nAnd the column names…\n\nnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\""
  },
  {
    "objectID": "modules/06a_reading_data_files.html#assign-the-data-to-an-object",
    "href": "modules/06a_reading_data_files.html#assign-the-data-to-an-object",
    "title": "Reading data files",
    "section": "Assign the Data to an Object",
    "text": "Assign the Data to an Object\nYou’ll want to take the data frame object that is returned by the read.csv() function and assign it to an object of some name. Although the concept of assignment will be covered later, for now just understand that we need to make the data more accessible to work with. You could name the object anything you want. Let’s assign it to DAT standing for data frame and let’s make it ALL CAPS.\nA note about case: R is a case-sensitive language so object names like DAT, dat, DaT, etc. are possible and can refer to different objects depending on how you assign them. We will use capital letters only because I like to flag objects that are data frame as special and this approach makes them visually identifiable. You could choose your own convention for naming data frames, other objects, variables in data frames, etc. but I don’t recommend being random about it."
  },
  {
    "objectID": "modules/06a_reading_data_files.html#using-built-in-read.csv-and-read.table",
    "href": "modules/06a_reading_data_files.html#using-built-in-read.csv-and-read.table",
    "title": "Reading data files",
    "section": "Using built-in read.csv() and read.table():",
    "text": "Using built-in read.csv() and read.table():\n\nDAT &lt;- read.csv(file_csv)\n\n# or by passing a \",\" as a the sep\nDAT &lt;- read.table(file_csv,\n                  sep = \",\"\n                  )"
  },
  {
    "objectID": "modules/06a_reading_data_files.html#using-read_csv-from-readr",
    "href": "modules/06a_reading_data_files.html#using-read_csv-from-readr",
    "title": "Reading data files",
    "section": "Using read_csv() from {readr}:",
    "text": "Using read_csv() from {readr}:\n\nDAT2 &lt;- readr::read_csv(file_csv)\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(head(DAT2))\n\n# A tibble: 6 × 4\n  time  name              year event  \n  &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n1 23.29 Jocelyn Crawford  2019 50 FREE\n2 23.31 Ava Sealander     2022 50 FREE\n3 23.49 Kelly Ngo         2016 50 FREE\n4 23.71 Helen Liu         2014 50 FREE\n5 23.76 Michele Kee       2014 50 FREE\n6 23.77 Natalia Orbach-M  2020 50 FREE"
  },
  {
    "objectID": "modules/06a_reading_data_files.html#data-as-a-data-frame",
    "href": "modules/06a_reading_data_files.html#data-as-a-data-frame",
    "title": "Reading data files",
    "section": "Data as a Data Frame",
    "text": "Data as a Data Frame\nYou should see an object named DAT that contains the data frame with some swim data. If you want to verify this is actually a data frame object, you can pass the DAT object into the is.data.frame() function. The function will return TRUE if it is and FALSE if it is not.\n\nis.data.frame(DAT)\n\n[1] TRUE\n\nis.data.frame(DAT2)  # tibbles are also data frames\n\n[1] TRUE"
  },
  {
    "objectID": "modules/06a_reading_data_files.html#are-they-both-tibbles",
    "href": "modules/06a_reading_data_files.html#are-they-both-tibbles",
    "title": "Reading data files",
    "section": "Are they both tibbles?",
    "text": "Are they both tibbles?\nTibbles are different from data frames, see the {tibble} library.\n\ntibble::is_tibble(DAT)\n\n[1] FALSE\n\ntibble::is_tibble(DAT2)\n\n[1] TRUE\n\n\nNow the you have the data frame, you can examine some of its contents, for example, the first 6 rows using the head() function.\n\nhead(DAT)    # hmm, something seems off.\n\n     V1               V2   V3      V4\n1  time             name year   event\n2 23.29 Jocelyn Crawford 2019 50 FREE\n3 23.31    Ava Sealander 2022 50 FREE\n4 23.49        Kelly Ngo 2016 50 FREE\n5 23.71        Helen Liu 2014 50 FREE\n6 23.76      Michele Kee 2014 50 FREE\n\n\nBecause header rows do exist atop the .csv file, specify that they exist by passing TRUE to the header argument of the function (e.g., header = TRUE or header = T).\n\nDAT &lt;- read.table(file_csv,\n                  sep = \",\", \n                  header = TRUE\n                  )\n\nhead(DAT)    # Perfect!\n\n   time             name year   event\n1 23.29 Jocelyn Crawford 2019 50 FREE\n2 23.31    Ava Sealander 2022 50 FREE\n3 23.49        Kelly Ngo 2016 50 FREE\n4 23.71        Helen Liu 2014 50 FREE\n5 23.76      Michele Kee 2014 50 FREE\n6 23.77 Natalia Orbach-M 2020 50 FREE"
  },
  {
    "objectID": "modules/06_reading_data_files.html",
    "href": "modules/06_reading_data_files.html",
    "title": "Reading data files",
    "section": "",
    "text": "{readxl}: for reading Excel spreadsheets\n{readr}: for reading .csv, .tsv, and .fwf files"
  },
  {
    "objectID": "modules/06_reading_data_files.html#libraries",
    "href": "modules/06_reading_data_files.html#libraries",
    "title": "Reading data files",
    "section": "",
    "text": "{readxl}: for reading Excel spreadsheets\n{readr}: for reading .csv, .tsv, and .fwf files"
  },
  {
    "objectID": "modules/06_reading_data_files.html#reading-excel-spreadsheets-with-readxl",
    "href": "modules/06_reading_data_files.html#reading-excel-spreadsheets-with-readxl",
    "title": "Reading data files",
    "section": "Reading Excel Spreadsheets with {readxl}",
    "text": "Reading Excel Spreadsheets with {readxl}\nWe will use the {readxl} library to handing reading of Excel files. Because Excel files can contain multiple sheets, one goal would be to find out the sheet names using readxl::excel_sheets (see ?readxl::excel_sheets). This function takes one argument, which is the path to the file. Passing the path will return the sheet names in that file. We can pass the path string directly into the function or if the file path is already saved as a object, pass that. In both cases, let’s save it as\nIn order to read an Excel spreadsheet file, you will need to specify at very least file and if you want to read a specific sheet other than the first one, then you will need to specify sheet.\n\nfile: a path to the file,\nsheet: the sheet name to read\n\n\nGetting Sheet Names\n\nreadxl::excel_sheets(path = here::here(\"data\", \"cms-top-all-time-2023-swim.xlsx\"))\n\n[1] \"diving\" \"swim\"   \"relay\" \n\nfile &lt;- here::here(\"data\", \"cms-top-all-time-2023-swim.xlsx\")\n\nreadxl::excel_sheets(path = file)\n\n[1] \"diving\" \"swim\"   \"relay\" \n\n\nGreat, we know know the sheet names. The benefit of passing an object is that you you may wish to pass the path to another function, for example, to read a sheet from the file.\n\n\nReading a Sheet\nIn order to read a sheet, we will use readxl::read_excel(), which takes the file path as the first argument and the name of the desired sheet as the second argument. You might get away with passing only the path as long as your goal is to read the first sheet because this is the default action. Let’s wrap the function in head() to see the top.\n\nhead(\n  readxl::read_excel(file)\n)\n\n# A tibble: 6 × 4\n  score  name              year  event         \n  &lt;chr&gt;  &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt;         \n1 525.35 Maia Presti       2015  1-Meter Diving\n2 514.70 Makenna Parkinson 2023  1-Meter Diving\n3 512.05 Emma Ng Pack      2023  1-Meter Diving\n4 494.95 Izzy Doud         2023  1-Meter Diving\n5 462.15 Carli Lessard     2015  1-Meter Diving\n6 447.70 Alexis Romero     2023  1-Meter Diving\n\n\nThe function also turns the file content into a data frame composed of row and column data. Luckily we have a clean file and nothing too messy. You can verify using R’s built-in function is.data.frame(), which will return TRUE if it’s a data frame or FALSE if not. We will assign this to an object\n\nis.data.frame(readxl::read_excel(file))\n\n[1] TRUE\n\n\nBut we don’t want the first sheet. Pass sheet = \"swim\" to read that sheet. Also, let’s read in the data and assign it to an object called DAT which will hold the data frame.\n\nDAT &lt;- readxl::read_excel(file, sheet = \"swim\")\n\nAnother way to read data files is using either {vroom}, which is extremely fast for reading large files (see docs for why it’s so awesome), or using {dplyr} library that is part of the {tidyverse}. {dplyr}, however, does not handle Excel files. In order to demonstrate how to use {readr}, we can save the data frame as a .csv file."
  },
  {
    "objectID": "modules/06_reading_data_files.html#writing-data-files",
    "href": "modules/06_reading_data_files.html#writing-data-files",
    "title": "Reading data files",
    "section": "Writing Data Files",
    "text": "Writing Data Files\nDespite it’s name, {readr} can save data frames too. Interestingly, at least at the time of this writing, {readr} allows you to write files in excel format even though you cannot open them.\nMoving forward, you can save the data frame as a .csv file using readr::write_csv(). When writing a file using write_csv() we need to specify key arguments: x, the data frame object and file, the file name. You do not need to set a delimiter because, given its name, .csv defaults the separation as a comma \",\". Other arguments may be necessary for other files and goals.\nIf, however, you specify name of the file (e.g., \"my file name.csv\"), the data frame will be written to a default location because no file path was provided. Um, so where is that default location? Well it depends and it’s complicated depending on whether files are .R or .Rmd. By default, .Rmd files will assume the directory from which the .Rmd file, NOT THE DATA FILE, is opened. But you don’t want to save a data file to the directory where your code lives.\nIf you are organized, you save your .R and .Rmd files in code directory and your data files in a data directory. So yeah, the default is a problem. The solution is to specify the file path using file = the file path.\nWhat’s the best way? The easiest/best way is with the {here} library, assuming of course you are smart enough to be using projects in RStudio. When you open a file from within a project, {here} will make the project directory the working directory. And if you are organized, your data files will be in a /data directory inside the project directory. When passing \"data\" as the first argument to here::here() ( e.g., here::here(\"data\"), you will see that the function returns a string containing the full path to the project directory plus the data subdirectory.\n\nhere::here(\"data\")\n\n[1] \"C:/Users/gcook/Sync/git/dataviz23/data\""
  },
  {
    "objectID": "modules/06_reading_data_files.html#a-workflow-side-note-on-strings",
    "href": "modules/06_reading_data_files.html#a-workflow-side-note-on-strings",
    "title": "Reading data files",
    "section": "A Workflow Side Note on Strings",
    "text": "A Workflow Side Note on Strings\nYou could avoid hard coding the change of the file extension in order to streamline you workflow. Every time to pass the path and the path changes you will need to change this by hand and doing so could be extremely annoying. For example, if you change the save location or the file name, you’ll need to make updates for all code referencing the path. To avoid potential headaches, we can instead use gsub() to examine a string, look for a pattern, and replace that pattern with another pattern. All we want to do is to change \".xlsx\" or \".xls\" in the string to \".csv\". And because we will next want to use this new name for reading later, let’s assign the change to a new string object, file_csv.\nFirst, let’s see what gsub() is doing.\n\ngsub(pattern = \".xlsx|.xls\",  \n     replacement = \".csv\", \n     x = file\n     )\n\n[1] \"C:/Users/gcook/Sync/git/dataviz23/data/cms-top-all-time-2023-swim.csv\"\n\n\nAssign to an object:\n\nfile_csv &lt;- gsub(\".xlsx|.xls\", \".csv\", file)\n\nSecond, pass the path object to write_csv():\n\nreadr::write_csv(x = DAT, \n                 file = file_csv\n                 )\n\nDid it save? Use file.exists().\n\nfile.exists(file_csv)\n\n[1] TRUE\n\n\nRemember, all we have done is saved the data frame. This new file will contain only the data from the spreadsheet that we read earlier. Before opening this new file, we need to take a detour on general handling of reading files with {readr}."
  },
  {
    "objectID": "modules/06_reading_data_files.html#reading-a-.csv-file-stored-on-a-website",
    "href": "modules/06_reading_data_files.html#reading-a-.csv-file-stored-on-a-website",
    "title": "Reading data files",
    "section": "Reading a .csv File Stored on a Website",
    "text": "Reading a .csv File Stored on a Website\nFor example, although the mtcars data is also a built-in data set in R, if it were a read actual .csv file save on some website, you can pass the URL path as the file. This file does exist on the {tidyverse} github for {readr}.\n\nreadr::read_csv(file = \"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nBecause file if the first argument of the function, you do not need to reference it specifically. Doing so just eliminates ambiguity for more complicated function calls. You will come across a lot of examples of code that do NOT reference the arguments by name.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\")\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nBy default, readr::read_csv() tries to guess whether column/variable names are present. If you know they exist, you can set col_names = TRUE.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = T)\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nIf the names are present and you set col_names = FALSE, you will get a mess because {readr} will assume the header row is data just as the rest of the file.\n\nreadr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = F)\n\nRows: 33 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 33 × 11\n   X1    X2    X3    X4    X5    X6    X7    X8    X9    X10   X11  \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 mpg   cyl   disp  hp    drat  wt    qsec  vs    am    gear  carb \n 2 21    6     160   110   3.9   2.62  16.46 0     1     4     4    \n 3 21    6     160   110   3.9   2.875 17.02 0     1     4     4    \n 4 22.8  4     108   93    3.85  2.32  18.61 1     1     4     1    \n 5 21.4  6     258   110   3.08  3.215 19.44 1     0     3     1    \n 6 18.7  8     360   175   3.15  3.44  17.02 0     0     3     2    \n 7 18.1  6     225   105   2.76  3.46  20.22 1     0     3     1    \n 8 14.3  8     360   245   3.21  3.57  15.84 0     0     3     4    \n 9 24.4  4     146.7 62    3.69  3.19  20    1     0     4     2    \n10 22.8  4     140.8 95    3.92  3.15  22.9  1     0     4     2    \n# ℹ 23 more rows\n\n\nAs you can see, the column names are all prefixed with “X” and the first row is now the name of the headers. names() or colnames() will return the column names, so we can apply it and see what happens. We will wrap readr::read_csv() in names(). See how this is a problem. You can use colnames() to test this too.\n\nnames(\n  readr::read_csv(\"https://github.com/tidyverse/readr/raw/main/inst/extdata/mtcars.csv\", col_names = T)\n  )\n\nRows: 32 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\""
  },
  {
    "objectID": "modules/06_reading_data_files.html#reading-a-.csv-file-stored-locally-on-your-computer",
    "href": "modules/06_reading_data_files.html#reading-a-.csv-file-stored-locally-on-your-computer",
    "title": "Reading data files",
    "section": "Reading a .csv File Stored Locally on your Computer",
    "text": "Reading a .csv File Stored Locally on your Computer\nIf a file actually existed on your computer, the file would not be a URL but rather the path location to where the file is stored.\nAnd now we can read the locale file as before except we are not passing the string name but rather an object (e.g., my_local_csv) holding the file path and file name. Voilà.\n\nreadr::read_csv(file_csv)\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   time  name              year event  \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows"
  },
  {
    "objectID": "modules/06_reading_data_files.html#reading-raw-data-that-is-comma-separated-e.g.-.csv",
    "href": "modules/06_reading_data_files.html#reading-raw-data-that-is-comma-separated-e.g.-.csv",
    "title": "Reading data files",
    "section": "Reading Raw Data that is Comma-Separated (e.g., .csv)",
    "text": "Reading Raw Data that is Comma-Separated (e.g., .csv)\nWe will file use readr::read_csv() to read our data file.\n\nreadr::read_csv(file_csv)\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   time  name              year event  \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows\n\n\nIf there were only data in the file and no names representing variables on the first row, the file might look like that below. We can imitate this by skipping the first row (containing names) using skip =.\n\nreadr::read_csv(file_csv, skip = 1)\n\nRows: 209 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): 23.29, Jocelyn Crawford, 50 FREE\ndbl (1): 2019\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 209 × 4\n   `23.29` `Jocelyn Crawford` `2019` `50 FREE`\n   &lt;chr&gt;   &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;    \n 1 23.31   Ava Sealander        2022 50 FREE  \n 2 23.49   Kelly Ngo            2016 50 FREE  \n 3 23.71   Helen Liu            2014 50 FREE  \n 4 23.76   Michele Kee          2014 50 FREE  \n 5 23.77   Natalia Orbach-M     2020 50 FREE  \n 6 23.77   Suzia Starzyk        2020 50 FREE  \n 7 23.87   Katie Bilotti        2010 50 FREE  \n 8 23.93   Jenni Rinker         2011 50 FREE  \n 9 24.02   Annika Sharma        2023 50 FREE  \n10 51.05   Kelly Ngo            2016 100 FREE \n# ℹ 199 more rows\n\n\nSee how the first row is assumed to be names? Setting col_names = F will fix the problem. Putting the arguments on separate rows of R code might improve code legibility.\n\nreadr::read_csv(file_csv, \n                skip = 1,\n                col_names = F\n                )\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): X1, X2, X4\ndbl (1): X3\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   X1    X2                  X3 X4     \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows\n\n\nBut we have no column names now. Setting col_names = will fix that. Use c() to combine 4 names, e.g., col_names = c(\"name1\", \"name2\", \"name3\", \"name4\").\n\nreadr::read_csv(file_csv, \n                skip = 1,\n                col_names = c(\"time\", \"name\", \"year\", \"event\")\n                )\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 210 × 4\n   time  name              year event  \n   &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n 1 23.29 Jocelyn Crawford  2019 50 FREE\n 2 23.31 Ava Sealander     2022 50 FREE\n 3 23.49 Kelly Ngo         2016 50 FREE\n 4 23.71 Helen Liu         2014 50 FREE\n 5 23.76 Michele Kee       2014 50 FREE\n 6 23.77 Natalia Orbach-M  2020 50 FREE\n 7 23.77 Suzia Starzyk     2020 50 FREE\n 8 23.87 Katie Bilotti     2010 50 FREE\n 9 23.93 Jenni Rinker      2011 50 FREE\n10 24.02 Annika Sharma     2023 50 FREE\n# ℹ 200 more rows\n\n\nLuckily, we have both names and data in the file and by default readr::read_csv() does what we intend."
  },
  {
    "objectID": "modules/06_reading_data_files.html#data-from-a-librarypackage",
    "href": "modules/06_reading_data_files.html#data-from-a-librarypackage",
    "title": "Reading data files",
    "section": "Data from a Library/Package",
    "text": "Data from a Library/Package\nAs mentioned earlier, mtcars is a data set on cars which is also part of base R, meaning you do not need to read it from anyplace. R does this automatically.\n\nprint(mtcars)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n# or \nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nAnd the column names…\n\nnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\""
  },
  {
    "objectID": "modules/06_reading_data_files.html#assign-the-data-to-an-object",
    "href": "modules/06_reading_data_files.html#assign-the-data-to-an-object",
    "title": "Reading data files",
    "section": "Assign the Data to an Object",
    "text": "Assign the Data to an Object\nYou’ll want to take the data frame object that is returned by the read.csv() function and assign it to an object of some name. Although the concept of assignment will be covered later, for now just understand that we need to make the data more accessible to work with. You could name the object anything you want. Let’s assign it to DAT standing for data frame and let’s make it ALL CAPS.\nA note about case: R is a case-sensitive language so object names like DAT, dat, DaT, etc. are possible and can refer to different objects depending on how you assign them. We will use capital letters only because I like to flag objects that are data frame as special and this approach makes them visually identifiable. You could choose your own convention for naming data frames, other objects, variables in data frames, etc. but I don’t recommend being random about it."
  },
  {
    "objectID": "modules/06_reading_data_files.html#using-built-in-read.csv-and-read.table",
    "href": "modules/06_reading_data_files.html#using-built-in-read.csv-and-read.table",
    "title": "Reading data files",
    "section": "Using built-in read.csv() and read.table():",
    "text": "Using built-in read.csv() and read.table():\n\nDAT &lt;- read.csv(file_csv)\n\n# or by passing a \",\" as a the sep\nDAT &lt;- read.table(file_csv,\n                  sep = \",\"\n                  )"
  },
  {
    "objectID": "modules/06_reading_data_files.html#using-read_csv-from-readr",
    "href": "modules/06_reading_data_files.html#using-read_csv-from-readr",
    "title": "Reading data files",
    "section": "Using read_csv() from {readr}:",
    "text": "Using read_csv() from {readr}:\n\nDAT2 &lt;- readr::read_csv(file_csv)\n\nRows: 210 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): time, name, event\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(head(DAT2))\n\n# A tibble: 6 × 4\n  time  name              year event  \n  &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;  \n1 23.29 Jocelyn Crawford  2019 50 FREE\n2 23.31 Ava Sealander     2022 50 FREE\n3 23.49 Kelly Ngo         2016 50 FREE\n4 23.71 Helen Liu         2014 50 FREE\n5 23.76 Michele Kee       2014 50 FREE\n6 23.77 Natalia Orbach-M  2020 50 FREE"
  },
  {
    "objectID": "modules/06_reading_data_files.html#data-as-a-data-frame",
    "href": "modules/06_reading_data_files.html#data-as-a-data-frame",
    "title": "Reading data files",
    "section": "Data as a Data Frame",
    "text": "Data as a Data Frame\nYou should see an object named DAT that contains the data frame with some swim data. If you want to verify this is actually a data frame object, you can pass the DAT object into the is.data.frame() function. The function will return TRUE if it is and FALSE if it is not.\n\nis.data.frame(DAT)\n\n[1] TRUE\n\nis.data.frame(DAT2)  # tibbles are also data frames\n\n[1] TRUE"
  },
  {
    "objectID": "modules/06_reading_data_files.html#are-they-both-tibbles",
    "href": "modules/06_reading_data_files.html#are-they-both-tibbles",
    "title": "Reading data files",
    "section": "Are they both tibbles?",
    "text": "Are they both tibbles?\nTibbles are different from data frames, see the {tibble} library.\n\ntibble::is_tibble(DAT)\n\n[1] FALSE\n\ntibble::is_tibble(DAT2)\n\n[1] TRUE\n\n\nNow the you have the data frame, you can examine some of its contents, for example, the first 6 rows using the head() function.\n\nhead(DAT)    # hmm, something seems off.\n\n     V1               V2   V3      V4\n1  time             name year   event\n2 23.29 Jocelyn Crawford 2019 50 FREE\n3 23.31    Ava Sealander 2022 50 FREE\n4 23.49        Kelly Ngo 2016 50 FREE\n5 23.71        Helen Liu 2014 50 FREE\n6 23.76      Michele Kee 2014 50 FREE\n\n\nBecause header rows do exist atop the .csv file, specify that they exist by passing TRUE to the header argument of the function (e.g., header = TRUE or header = T).\n\nDAT &lt;- read.table(file_csv,\n                  sep = \",\", \n                  header = TRUE\n                  )\n\nhead(DAT)    # Perfect!\n\n   time             name year   event\n1 23.29 Jocelyn Crawford 2019 50 FREE\n2 23.31    Ava Sealander 2022 50 FREE\n3 23.49        Kelly Ngo 2016 50 FREE\n4 23.71        Helen Liu 2014 50 FREE\n5 23.76      Michele Kee 2014 50 FREE\n6 23.77 Natalia Orbach-M 2020 50 FREE"
  }
]